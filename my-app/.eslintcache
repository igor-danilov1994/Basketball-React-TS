[{"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\index.tsx":"1","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\App.tsx":"3","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Login\\Login.tsx":"4","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Registration\\Registration.tsx":"5","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Header\\Header.tsx":"6","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Menu\\Menu.tsx":"7","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\Teams.tsx":"8","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Pagination\\Pagiation.tsx":"9","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\Players.tsx":"10","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayersEmpty\\PlayersEmpty.tsx":"11","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\AddPlayer\\AddPlayer.tsx":"12","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\CardEmpty\\CardEmpty.tsx":"13","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\AddTeams\\AddTeams.tsx":"14","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsEmpty\\TeamsEmpty.tsx":"15","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCard\\TeamsCard.tsx":"16","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayerCard\\Players–°ard.tsx":"17","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCardDetails\\TeamsCardDetails.tsx":"18","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\API\\api.ts":"19","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\assets\\FornControl\\Blocl_Buttons\\Blocl_Buttons.tsx":"20","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\assets\\FornControl\\AddImages\\AddImages.tsx":"21","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\authReducer.ts":"22","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\redux-store.ts":"23","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\playersReducer.ts":"24","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Main\\Main.tsx":"25","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\selectors.ts":"26","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayersCardDetails\\PlayersCardDetails.tsx":"27","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\BreadCrumbs\\BreadCrumbs.tsx":"28","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\SelectComponent\\SelectComponent.tsx":"29","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\AddPlayer\\Calendar\\CalendarComponent.tsx":"30","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCardDetails\\TeamRoster.tsx":"31","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\ErrorsMessage\\ErrorsMessage.tsx":"32","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\teamsReducer.ts":"33"},{"size":583,"mtime":1614850898221,"results":"34","hashOfConfig":"35"},{"size":425,"mtime":499162500000,"results":"36","hashOfConfig":"35"},{"size":980,"mtime":1615550722026,"results":"37","hashOfConfig":"35"},{"size":3351,"mtime":1615802776920,"results":"38","hashOfConfig":"35"},{"size":5718,"mtime":1615809531172,"results":"39","hashOfConfig":"35"},{"size":346,"mtime":1615560939871,"results":"40","hashOfConfig":"35"},{"size":3013,"mtime":1615561010390,"results":"41","hashOfConfig":"35"},{"size":3310,"mtime":1615559035093,"results":"42","hashOfConfig":"35"},{"size":2960,"mtime":1615561544110,"results":"43","hashOfConfig":"35"},{"size":4041,"mtime":1615564158833,"results":"44","hashOfConfig":"35"},{"size":280,"mtime":1615562068003,"results":"45","hashOfConfig":"35"},{"size":8261,"mtime":1615885699839,"results":"46","hashOfConfig":"35"},{"size":754,"mtime":1615562301039,"results":"47","hashOfConfig":"35"},{"size":4189,"mtime":1615885699826,"results":"48","hashOfConfig":"35"},{"size":282,"mtime":1615562068015,"results":"49","hashOfConfig":"35"},{"size":854,"mtime":1615564158799,"results":"50","hashOfConfig":"35"},{"size":1898,"mtime":1615561544085,"results":"51","hashOfConfig":"35"},{"size":3770,"mtime":1615559035159,"results":"52","hashOfConfig":"35"},{"size":5710,"mtime":1615564465835,"results":"53","hashOfConfig":"35"},{"size":459,"mtime":1612800607960,"results":"54","hashOfConfig":"35"},{"size":823,"mtime":1615885417957,"results":"55","hashOfConfig":"35"},{"size":2265,"mtime":1615560124887,"results":"56","hashOfConfig":"35"},{"size":511,"mtime":1615548805704,"results":"57","hashOfConfig":"35"},{"size":4424,"mtime":1615884910755,"results":"58","hashOfConfig":"35"},{"size":2233,"mtime":1615557400323,"results":"59","hashOfConfig":"35"},{"size":3647,"mtime":1615557400260,"results":"60","hashOfConfig":"35"},{"size":4714,"mtime":1615561863093,"results":"61","hashOfConfig":"35"},{"size":1091,"mtime":1615532986740,"results":"62","hashOfConfig":"35"},{"size":863,"mtime":1615564158808,"results":"63","hashOfConfig":"35"},{"size":425,"mtime":1614253054304,"results":"64","hashOfConfig":"35"},{"size":3939,"mtime":1615465439847,"results":"65","hashOfConfig":"35"},{"size":334,"mtime":1615459041184,"results":"66","hashOfConfig":"35"},{"size":3684,"mtime":1615885417964,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},"1fkb8xw",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"71"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"71"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"71"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"71"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"71"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"71"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"71"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"71"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"71"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"71"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"71"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\index.tsx",["147"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/toolkit/redux-store\";\n\n\nlet state = store.getState()\nconsole.log('index')\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </ Provider>\n        </ BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n",["148","149"],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\reportWebVitals.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\App.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Login\\Login.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Registration\\Registration.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Header\\Header.tsx",["150"],"import React from 'react'\r\nimport logo from './images/logo.png'\r\nimport s from './Header.module.css'\r\n\r\nconst Header = ({}) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.header_logo}>\r\n                <img src={logo} alt=\"logo\"/>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Menu\\Menu.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\Teams.tsx",["151"],"import React, {useEffect} from 'react'\r\nimport TeamsCard from \"./TeamsCard/TeamsCard\";\r\nimport Pagination from \"../Pagination/Pagiation\";\r\nimport {getPageSizeTeam, getPageTeam, getTeamsCount, getTeamsData, getUserName} from \"../../Redux/toolkit/selectors\";\r\nimport {getTeams} from \"../../Redux/toolkit/teamsReducer\"\r\nimport {connect} from \"react-redux\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {setTeamsRequest, setPageTeams, setTeamSerialId} from \"../../Redux/toolkit/teamsReducer\"\r\nimport searchIcon from \"../../assets/images/search.png\";\r\nimport total from \"../../totalStyle.module.css\";\r\nimport {AppStateType} from \"../../Redux/toolkit/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    name: string | null\r\n    pageTeam: number\r\n    pageSizeTeam: number\r\n    teamsCount: any\r\n    teams: Array<any>\r\n}\r\ntype MapDispatchPropsType = {\r\n    getTeams: (name: string, pageTeam: number, pageSizeTeam: number ) => void\r\n    setTeamSerialId: (index: number) => void\r\n    setTeamsRequest: (pageTeam: number, pageSizeTeam: number) => void\r\n}\r\n\r\ntype TeamsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst Teams: React.FC <TeamsPropsType> = (\r\n    {getTeams, name, pageTeam, pageSizeTeam, teamsCount, teams, setTeamSerialId, setTeamsRequest}) => {\r\n\r\n\r\n    useEffect(() => {\r\n        getTeams(name!, pageTeam, pageSizeTeam)\r\n    }, [pageTeam, pageSizeTeam])\r\n\r\n    return (\r\n        <>\r\n            {teamsCount !== 0 ?\r\n                <div className={total.mainBlock}>\r\n                    <div className={total.topElement}>\r\n\r\n                        <div className={total.topElement_search}>\r\n                            <input type=\"text\" placeholder='Search...'/>\r\n                            <img src={searchIcon} alt=\"search\"/>\r\n                        </div>\r\n\r\n                        <NavLink to='/main/addTeams'\r\n                                 className={`${total.btn} ${total.btn_add} ${total.topElement_btn}`}>\r\n                            <span>Add</span>\r\n                            <span>+</span>\r\n                        </NavLink>\r\n\r\n                    </div>\r\n\r\n                    <div className={total.mainBlock_card}>\r\n                        {teams.map((teams: any, index: number) =>\r\n                            <NavLink key={teams.id} to='/main/teamsCardDetails'\r\n                                     onClick={() => setTeamSerialId(index)}\r\n                            >\r\n                                <TeamsCard team={teams} key={index}/>\r\n                            </NavLink>\r\n                        )}\r\n                    </div>\r\n                    <Pagination\r\n                        page={pageTeam}\r\n                        pageSize={pageSizeTeam}\r\n                        pageCount={teamsCount}\r\n                        setRequest={setTeamsRequest}\r\n                    />\r\n                </div>\r\n                : <Redirect to=\"/main/teams_E\"/>}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    name: getUserName(state),\r\n    teams: getTeamsData(state),\r\n    pageTeam: getPageTeam(state),\r\n    teamsCount: getTeamsCount(state),\r\n    pageSizeTeam: getPageSizeTeam(state),\r\n})\r\n\r\nexport default connect(mapStateToProps, {getTeams, setTeamsRequest, setTeamSerialId, setPageTeams})(Teams)\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Pagination\\Pagiation.tsx",["152"],"import React, {useState, CSSProperties, useEffect} from 'react'\r\nimport s from './Pagination.module.css'\r\nimport showCountCard from '../../assets/images/link.png'\r\nimport ReactPaginate from \"react-paginate\";\r\nimport {connect} from 'react-redux';\r\nimport {getTeams} from \"../../Redux/toolkit/teamsReducer\";\r\nimport {getPlayers} from \"../../Redux/toolkit/playersReducer\";\r\n\r\nexport interface toggleCountCard {\r\n    [Key: string]: CSSProperties;\r\n}\r\ntype MapDispatchPropsType = {\r\n    setRequest: (currentPage: number, size: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    page: number\r\n    pageSize: number\r\n    pageCount: number\r\n}\r\ntype PaginationPropsType = MapDispatchPropsType & OwnPropsType\r\n\r\n\r\n    const Pagination: React.FC <PaginationPropsType> = ({page, pageSize, setRequest, pageCount} ) => {\r\n\r\n    const [currentPage, setCurrentPage] = useState(page)\r\n    const [size, setSize] = useState(pageSize)\r\n    const [select, setPageSelect] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setRequest(currentPage, size)\r\n    }, [currentPage, size])\r\n\r\n\r\n    const styles: toggleCountCard = {\r\n        setCountCardShow: {\r\n            display: 'flex',\r\n        },\r\n        setCountCardHidden: {\r\n            display: 'none',\r\n        }\r\n    }\r\n\r\n    let handlePageClick = (e: any) => {\r\n        setCurrentPage(e.selected + 1)\r\n    }\r\n\r\n    let setCountCard = (e: any,) => {\r\n        setSize(e.currentTarget.value)\r\n        setPageSelect(!select)\r\n    }\r\n\r\n    return (\r\n        <div className={s.pagination_wrapper}>\r\n            <ReactPaginate\r\n                disableInitialCallback={false}\r\n                previousLabel={``}\r\n                nextLabel={''}\r\n                breakLabel={'...'}\r\n                breakClassName={`${s.breakMe}`}\r\n                pageCount={pageCount / size}\r\n                marginPagesDisplayed={5}\r\n                pageRangeDisplayed={6}\r\n                onPageChange={handlePageClick}\r\n                containerClassName={`${s.pagination}`}\r\n                activeClassName={`${s.active}`}\r\n            />\r\n\r\n            <div className={s.pagination_selectCountCard}>\r\n                <ul style={select ? styles.setCountCardShow : styles.setCountCardHidden}\r\n                    className={s.pagination_setCountCard}>\r\n                    <li onClick={setCountCard} value={6}>6</li>\r\n                    <li onClick={setCountCard} value={12}>12</li>\r\n                    <li onClick={setCountCard} value={24}>24</li>\r\n                </ul>\r\n                <div className={s.pagination_currentCard} onClick={() => setPageSelect(!select)}>\r\n                    <span>\r\n                        {size}\r\n                    </span>\r\n                    <img className={select ? `${s.pagination_currentCard_rotate}` : ''}\r\n                         src={showCountCard} alt=\"icon\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null, {getTeams, getPlayers})(Pagination)\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\Players.tsx",["153"],"import React, {useEffect} from 'react'\r\nimport PlayerCard from \"./PlayerCard/Players–°ard\";\r\nimport Pagination from \"../Pagination/Pagiation\";\r\nimport {connect} from \"react-redux\";\r\nimport {getPagePlayer, getPageSizePlayer, getPlayersCount, getPlayersData,\r\n    getPlayersNames, getUserName\r\n} from '../../Redux/toolkit/selectors';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport total from \"../../totalStyle.module.css\";\r\nimport searchIcon from \"../../assets/images/search.png\";\r\nimport {setPlayersRequest, getPlayers, setSerialPlayersID}\r\n    from \"../../Redux/toolkit/playersReducer\";\r\nimport {getTeams} from \"../../Redux/toolkit/teamsReducer\";\r\nimport SelectComponent from \"../SelectComponent/SelectComponent\";\r\nimport {AppStateType} from \"../../Redux/toolkit/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    userName: string | null\r\n    pagePlayer: number\r\n    pageSizePlayer: number\r\n    playersCount: any\r\n    playersName: Array<string>\r\n    players: Array<any>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getPlayers: (name: string, pagePlayer: number, pageSizePlayer: number) => void\r\n    getTeams: (name: string, pagePlayer: number, pageSizePlayer: number) => void\r\n    setSerialPlayersID: (index: number) => void\r\n    setPlayersRequest: (pagePlayer: number, pageSizePlayer: number) => void\r\n}\r\n\r\ntype PlayersPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst Players: React.FC<PlayersPropsType> = (\r\n    {\r\n        userName, pagePlayer, getPlayers, players, setSerialPlayersID, setPlayersRequest,\r\n        pageSizePlayer, playersCount, playersName\r\n    }) => {\r\n\r\n    useEffect(() => {\r\n        getPlayers(userName!, pagePlayer, pageSizePlayer)\r\n        getTeams(userName!, pagePlayer, pageSizePlayer)\r\n    }, [pagePlayer, pageSizePlayer])\r\n\r\n\r\n    return (\r\n        <>\r\n            {playersCount !== 0 ?\r\n                <div className={total.mainBlock}>\r\n\r\n                    <div className={total.topElement}>\r\n                        <div className={total.topElement_options}>\r\n                            <div className={total.topElement_search}>\r\n                                <input type=\"text\" placeholder='Search...'/>\r\n                                <img src={searchIcon} alt=\"search\"/>\r\n                            </div>\r\n\r\n                            <SelectComponent options={playersName}\r\n\r\n                            />\r\n\r\n                        </div>\r\n\r\n                        <NavLink to='/main/addPlayer'\r\n                                 className={`${total.btn} ${total.btn_add} ${total.topElement_btn}`}>\r\n                            <span>Add</span>\r\n                            <span>+</span>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div className={total.mainBlock_card}>\r\n                        {players.map((players: any, index: number) =>\r\n                            <NavLink key={players.id} onClick={() => setSerialPlayersID(index)}\r\n                                     to='/main/playersCardDetails'>\r\n                                <PlayerCard key={index} player={players} teamId={players.team}\r\n\r\n                                />\r\n                            </NavLink>\r\n                        )}\r\n                    </div>\r\n                    <Pagination\r\n                        page={pagePlayer}\r\n                        pageSize={pageSizePlayer}\r\n                        pageCount={playersCount}\r\n                        setRequest={setPlayersRequest}/>\r\n                </div>\r\n                : <Redirect to=\"/main/players_E\"/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    userName: getUserName(state),\r\n    players: getPlayersData(state),\r\n    playersName: getPlayersNames(state),\r\n    playersCount: getPlayersCount(state),\r\n    pagePlayer: getPagePlayer(state),\r\n    pageSizePlayer: getPageSizePlayer(state),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {getTeams, setPlayersRequest, getPlayers, setSerialPlayersID})(Players)\r\n\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayersEmpty\\PlayersEmpty.tsx",["154","155"],"import React from 'react'\nimport img from \"../images/PlayersEmpty.png\";\nimport CardEmpty from \"../../CardEmpty/CardEmpty\";\n\nconst PlayersEmpty = () => {\n    return (\n        <CardEmpty descr={'players'} patch={'/main/addPlayer'} img={img} />\n    )\n}\n\nexport default PlayersEmpty;\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\AddPlayer\\AddPlayer.tsx",["156","157"],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\CardEmpty\\CardEmpty.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\AddTeams\\AddTeams.tsx",["158"],"import React, {useState} from 'react';\r\nimport f from \"../../../assets/FornControl/FormControl.module.css\";\r\nimport total from \"../../../totalStyle.module.css\";\r\nimport AddImages from \"../../../assets/FornControl/AddImages/AddImages\";\r\nimport Block_Buttons from \"../../../assets/FornControl/Blocl_Buttons/Blocl_Buttons\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {setTeam, updateTeam} from \"../../../Redux/toolkit/teamsReducer\"\r\nimport {getSerialTeamID, getTeamsData, getTeamsNames} from \"../../../Redux/toolkit/selectors\";\r\nimport ErrorsMessage from \"../../ErrorsMessage/ErrorsMessage\";\r\nimport {AppStateType} from \"../../../Redux/toolkit/redux-store\";\r\n\r\ntype  typeData = {\r\n    imageUrl: any\r\n    name: string\r\n    division: string\r\n    conference: string\r\n    foundationYear: number\r\n}\r\n\r\ntype mapStatePropsType = {\r\n    serialTeamID: number | null\r\n    teams: Array<any>\r\n    teamsName: Array<any>\r\n}\r\ntype mapDispatchPropsType = {\r\n    setTeam: (data: typeData, getCurrentTeamID: number) => void\r\n    updateTeam: (data: typeData, getCurrentTeamID: number) => void\r\n}\r\n\r\ntype AddTeamsPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nconst AddTeams: React.FC<AddTeamsPropsType> = ({serialTeamID, teams, setTeam, teamsName,}) => {\r\n\r\n    const [imgAvatar, setImg] = useState()\r\n\r\n    const onSubmit = (data: typeData) => {\r\n        data.imageUrl = imgAvatar\r\n        data.foundationYear = Number(data.foundationYear)\r\n        let getCurrentTeamID = null\r\n\r\n        if (serialTeamID) {\r\n            getCurrentTeamID = teams[serialTeamID].id\r\n        }\r\n        setTeam(data, getCurrentTeamID)\r\n    }\r\n    const {register, handleSubmit, errors} = useForm()\r\n\r\n    let getImg = (img: any) => {\r\n        setImg(img[0])\r\n    }\r\n\r\n    return (\r\n        <div className={f.add}>\r\n            <div className={total.breadCrumbs}>\r\n                Main/Teams/{serialTeamID ? teamsName : 'NewTeam'}\r\n            </div>\r\n            <div className={f.add_form}>\r\n                <div className={f.add_form_img}>\r\n\r\n                    {/*<AddImages getImg={getImg}/>*/}\r\n\r\n                </div>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <div>\r\n                        <div className={f.add_form_data}>\r\n                            <label className={total.text}>Name</label>\r\n                            <input name='name' ref={register({required: true})} type=\"text\"/>\r\n                            {errors.name &&\r\n                            <ErrorsMessage textMessage={'Name is registered'}/>}\r\n                        </div>\r\n                        <div className={f.add_form_data}>\r\n                            <label className={total.text}>Division</label>\r\n                            <input name='division' ref={register({required: true})} type=\"text\"/>\r\n                            {errors.division &&\r\n                            <ErrorsMessage textMessage={'Division is registered'}/>}\r\n                        </div>\r\n                        <div className={f.add_form_data}>\r\n                            <label className={total.text}>Conference</label>\r\n                            <input name='conference' ref={register({required: true})} type=\"text\"/>\r\n                            {errors.conference &&\r\n                            <ErrorsMessage textMessage={'Conference is registered'}/>}\r\n                        </div>\r\n                        <div className={f.add_form_data}>\r\n                            <label className={total.text} htmlFor=\"\">Year of foundation</label>\r\n                            <input name='foundationYear' ref={register({required: true})} type=\"text\"/>\r\n                            {errors.foundationYear &&\r\n                            <ErrorsMessage textMessage={'Year of foundation is registered'}/>}\r\n                        </div>\r\n                    </div>\r\n                    <Block_Buttons/>\r\n                </ form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStatePropsType => ({\r\n    serialTeamID: getSerialTeamID(state),\r\n    teams: getTeamsData(state),\r\n    teamsName: getTeamsNames(state),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {setTeam, updateTeam})(AddTeams)\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsEmpty\\TeamsEmpty.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCard\\TeamsCard.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayerCard\\Players–°ard.tsx",["159"],"import React, {useEffect, useState} from 'react'\r\nimport s from \"../../../assets/Style/CardLayout/CardLayout.module.css\"\r\nimport total from \"../../../totalStyle.module.css\"\r\nimport {connect} from \"react-redux\"\r\nimport {getTeamsForId} from \"../../../Redux/toolkit/selectors\"\r\nimport {setTeamSerialId} from \"../../../Redux/toolkit/teamsReducer\"\r\n\r\nconst ROOT_IMAGES: string = 'http://dev.trainee.dex-it.ru'\r\n\r\ntype PlayerCardPropsType = {\r\n    teamId: number\r\n    teamName: Array<any>\r\n    player: any\r\n    setTeamSerialId: (teamId: number) => void\r\n}\r\n\r\nconst PlayerCard: React.FC<PlayerCardPropsType> = (\r\n    {setTeamSerialId, teamId, teamName, player,}) => {\r\n\r\n    const [nameTeam, setNameTeam] = useState('')\r\n\r\n    useEffect(() => {\r\n        setTeamSerialId(teamId)\r\n    }, [])\r\n\r\n\r\n    if (teamName.length > 0 && nameTeam === '') {\r\n        setNameTeam(teamName[0].name)\r\n    }\r\n\r\n    return (\r\n        <div className={s.cardLayout}>\r\n            <div className={`${s.cardLayout_image} ${s.cardLayout_face}`}>\r\n                <img src={` ${ROOT_IMAGES}${player.avatarUrl}`} alt=\"avatar\"/>\r\n            </div>\r\n            <div className={s.cardLayout_description}>\r\n                    <span className={total.text_small}>\r\n                        {player.name}\r\n                        <span>#{player.number}</span>\r\n                    </span>\r\n\r\n                <span className={total.text_middle14}>{nameTeam}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    teamName: getTeamsForId(state)\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {setTeamSerialId})(PlayerCard)\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCardDetails\\TeamsCardDetails.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\API\\api.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\assets\\FornControl\\Blocl_Buttons\\Blocl_Buttons.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\assets\\FornControl\\AddImages\\AddImages.tsx",["160","161"],"import React, {useRef} from 'react';\r\nimport s from \"./AddingImg.module.css\";\r\nimport avatar from '../../images/addAvatar.svg';\r\n\r\ntype AddImagesPropsType = {\r\n    setImg: (img: any) => void\r\n}\r\n\r\nconst AddImages: React.FC<AddImagesPropsType> = ({setImg}) => {\r\n\r\n    const ref= useRef(null)\r\n\r\n    let handleClick = () => {\r\n        // @ts-ignore\r\n        ref.current.click()\r\n    }\r\n\r\n    let ABC = () => {\r\n        // @ts-ignore\r\n        setImg(ref.current.files)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.addAvatar_Logo} onClick={handleClick}>\r\n                <img src={avatar} alt=\"addAvatar\"/>\r\n            </div>\r\n            <input style={{display: \"none\"}} ref={ ref }\r\n                   accept=\"image/*\" type=\"file\" onChange={ABC}  />\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default AddImages","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\authReducer.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\redux-store.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\playersReducer.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Main\\Main.tsx",["162","163"],"import React, {useEffect} from 'react'\r\nimport '../../App.css'\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport Header from '../Header/Header';\r\nimport Menu from \"../Menu/Menu\";\r\nimport Teams from \"../Teams/Teams\";\r\nimport TeamsEmpty from '../Teams/TeamsEmpty/TeamsEmpty';\r\nimport TeamsCardDetails from \"../Teams/TeamsCardDetails/TeamsCardDetails\";\r\nimport Players from '../Players/Players';\r\nimport PlayersEmpty from \"../Players/PlayersEmpty/PlayersEmpty\";\r\nimport AddPlayer from '../Players/AddPlayer/AddPlayer';\r\nimport AddTeams from '../Teams/AddTeams/AddTeams';\r\nimport PlayersCardDetails from '../Players/PlayersCardDetails/PlayersCardDetails';\r\nimport {connect} from \"react-redux\";\r\nimport {getPosition} from \"../../Redux/toolkit/playersReducer\";\r\n\r\ntype MainPropsType = {\r\n    getPosition: () => void\r\n    teamsCount: number\r\n}\r\n\r\nconst Main: React.FC <MainPropsType> = ({getPosition, teamsCount }) => {\r\n\r\n    useEffect(() => {\r\n        getPosition()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <div className=\"app-content\">\r\n                <Menu/>\r\n                <div className=\"main\">\r\n\r\n                    {teamsCount > 1 ? <Redirect to=\"/main/players\"/> : <Redirect to=\"/main/teams\"/>}\r\n\r\n                    <Route path='/main/teams' render={() => <Teams/>}/>\r\n                    <Route path='/main/teams_E' render={() => <TeamsEmpty/>}/>\r\n                    <Route path='/main/teamsCardDetails' render={() => < TeamsCardDetails/>}/>\r\n                    <Route path='/main/addTeams' render={() => < AddTeams/>}/>\r\n\r\n                    <Route path='/main/players' render={() => <Players/>}/>\r\n                    <Route path='/main/players_E' render={() => <PlayersEmpty/>}/>\r\n                    <Route path='/main/playersCardDetails' render={() => < PlayersCardDetails/>}/>\r\n                    <Route path='/main/addPlayer' render={() => <AddPlayer/>}/>\r\n                    {/*<Route path='*' render={() => <div> page 404 NOT FOUND</div>}/>*/}\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nlet mapStateToProps = (state: any) => ({\r\n    teamsCount: state.teams.count,\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {getPosition})(Main)\r\n\r\n\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\selectors.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayersCardDetails\\PlayersCardDetails.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\BreadCrumbs\\BreadCrumbs.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\SelectComponent\\SelectComponent.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\AddPlayer\\Calendar\\CalendarComponent.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCardDetails\\TeamRoster.tsx",["164","165","166","167","168"],"import React, {useEffect, useState} from 'react';\r\nimport {getPagePlayer, getPageSizePlayer, getPlayersCount,\r\n    getPlayersOfCurrentTeam, getUserName} from '../../../Redux/toolkit/selectors';\r\nimport s from '../../../assets/Style/CardDetails/CardDetails.module.css'\r\nimport total from '../../../totalStyle.module.css'\r\nimport {connect} from \"react-redux\";\r\nimport {setPlayersRequest, getPlayers} from \"../../../Redux/toolkit/playersReducer\";\r\nimport {setTeamSerialId} from \"../../../Redux/toolkit/teamsReducer\";\r\n\r\nconst TeamRoster = (props: any) => {\r\n\r\n    const [page, setPage] = useState(props.pagePlayer)\r\n    const [count, setCount] = useState(props.count)\r\n\r\n    let result = props.count - 25\r\n\r\n    useEffect(() => {\r\n        props.getPlayers(props.name, 1, count)\r\n    }, [])\r\n\r\n    let ROOT_IMAGES: string = 'http://dev.trainee.dex-it.ru'\r\n\r\n    const getAgePlayer = (birthday: string) => {\r\n        let currentBirthday: string = birthday.slice(0, 4)\r\n        const currentYear = new Date().getFullYear()\r\n\r\n        const result = currentYear - (Number(currentBirthday))\r\n        return result\r\n    }\r\n\r\n    return (\r\n        <div className={s.cardDetails_roster}>\r\n            <h1 className={total.text_small}>Roster</h1>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <td>#</td>\r\n                    <td>\r\n                        <span className={total.text_middle14}>Player</span>\r\n                    </td>\r\n                    <td>\r\n                        <span className={total.text_middle14}>Height</span>\r\n                    </td>\r\n                    <td>\r\n                        <span className={total.text_middle14}>Weight</span>\r\n                    </td>\r\n                    <td>\r\n                        <span className={total.text_middle14}>Age</span>\r\n                    </td>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {props.playersOfCurrentTeam.map((player: any) =>\r\n                    <tr key={player.id}>\r\n                        <td>\r\n                            <span className={total.text_middle14}>{player.number}</span>\r\n                        </td>\r\n                        <td>\r\n                            <img src={`${ROOT_IMAGES}${player.avatarUrl}`} alt=\"img\"/>\r\n                        </td>\r\n                        <td>\r\n                            <div className={s.cardDetails_roster_info}>\r\n                                <div className={s.cardDetails_roster_info_descr}>\r\n                                    <span className={total.text__middle14}>{player.name}</span>\r\n                                    <span className={total.text_extraSmall}>{player.position}</span>\r\n                                </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <span className={total.text_middle14}>{player.height} cm</span>\r\n                        </td>\r\n                        <td>\r\n                            <span className={total.text_middle14}>{player.weight} kg</span>\r\n                        </td>\r\n                        <td>\r\n                            <span className={total.text_middle14}>{player.number}</span>\r\n                        </td>\r\n                        <td>\r\n                            <span className={total.text_middle14}>{getAgePlayer(player.birthday)}</span>\r\n                        </td>\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: any) => ({\r\n    name: getUserName(state),\r\n    count: getPlayersCount(state),\r\n    pagePlayer: getPagePlayer(state),\r\n    pageSizePlayer: getPageSizePlayer(state),\r\n    playersOfCurrentTeam: getPlayersOfCurrentTeam(state),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {setTeamSerialId, setPlayersRequest, getPlayers})(TeamRoster)","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\ErrorsMessage\\ErrorsMessage.tsx",["169"],"import React from 'react'\r\nimport total from \"../../totalStyle.module.css\"\r\n\r\ntype ErrorsMessagePropsType = {\r\n    textMessage: string\r\n}\r\n\r\nconst ErrorsMessage: React.FC <ErrorsMessagePropsType> = ({textMessage}) => {\r\n    return (\r\n        <span className={total.error}>{textMessage}</span>\r\n    )\r\n}\r\n\r\nexport default ErrorsMessage","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\teamsReducer.ts",[],{"ruleId":"170","severity":1,"message":"171","line":10,"column":5,"nodeType":"172","messageId":"173","endLine":10,"endColumn":10},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":5,"column":17,"nodeType":"180","messageId":"181","endLine":5,"endColumn":19},{"ruleId":"182","severity":1,"message":"183","line":35,"column":8,"nodeType":"184","endLine":35,"endColumn":32,"suggestions":"185"},{"ruleId":"182","severity":1,"message":"186","line":32,"column":8,"nodeType":"184","endLine":32,"endColumn":27,"suggestions":"187"},{"ruleId":"182","severity":1,"message":"188","line":44,"column":8,"nodeType":"184","endLine":44,"endColumn":36,"suggestions":"189"},{"ruleId":"170","severity":1,"message":"190","line":5,"column":5,"nodeType":"172","messageId":"173","endLine":5,"endColumn":10},{"ruleId":"170","severity":1,"message":"191","line":6,"column":5,"nodeType":"172","messageId":"173","endLine":6,"endColumn":12},{"ruleId":"170","severity":1,"message":"192","line":1,"column":26,"nodeType":"172","messageId":"173","endLine":1,"endColumn":35},{"ruleId":"193","severity":1,"message":"194","line":164,"column":21,"nodeType":"195","endLine":164,"endColumn":37},{"ruleId":"193","severity":1,"message":"194","line":92,"column":21,"nodeType":"195","endLine":92,"endColumn":37},{"ruleId":"182","severity":1,"message":"196","line":24,"column":8,"nodeType":"184","endLine":24,"endColumn":10,"suggestions":"197"},{"ruleId":"170","severity":1,"message":"192","line":1,"column":16,"nodeType":"172","messageId":"173","endLine":1,"endColumn":25},{"ruleId":"170","severity":1,"message":"198","line":1,"column":35,"nodeType":"172","messageId":"173","endLine":1,"endColumn":43},{"ruleId":"170","severity":1,"message":"199","line":3,"column":26,"nodeType":"172","messageId":"173","endLine":3,"endColumn":32},{"ruleId":"182","severity":1,"message":"200","line":26,"column":8,"nodeType":"184","endLine":26,"endColumn":10,"suggestions":"201"},{"ruleId":"170","severity":1,"message":"202","line":12,"column":12,"nodeType":"172","messageId":"173","endLine":12,"endColumn":16},{"ruleId":"170","severity":1,"message":"203","line":12,"column":18,"nodeType":"172","messageId":"173","endLine":12,"endColumn":25},{"ruleId":"170","severity":1,"message":"204","line":13,"column":19,"nodeType":"172","messageId":"173","endLine":13,"endColumn":27},{"ruleId":"170","severity":1,"message":"205","line":15,"column":9,"nodeType":"172","messageId":"173","endLine":15,"endColumn":15},{"ruleId":"182","severity":1,"message":"206","line":19,"column":8,"nodeType":"184","endLine":19,"endColumn":10,"suggestions":"207"},{"ruleId":"170","severity":1,"message":"208","line":2,"column":8,"nodeType":"172","messageId":"173","endLine":2,"endColumn":9},"@typescript-eslint/no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["209"],"no-negated-in-lhs",["210"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getTeams' and 'name'. Either include them or remove the dependency array. If 'getTeams' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["211"],"React Hook useEffect has a missing dependency: 'setRequest'. Either include it or remove the dependency array. If 'setRequest' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["212"],"React Hook useEffect has missing dependencies: 'getPlayers' and 'userName'. Either include them or remove the dependency array. If 'getPlayers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["213"],"'patch' is assigned a value but never used.","'players' is assigned a value but never used.","'useEffect' is defined but never used.","react/jsx-pascal-case","Imported JSX component Block_Buttons must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","React Hook useEffect has missing dependencies: 'setTeamSerialId' and 'teamId'. Either include them or remove the dependency array. If 'setTeamSerialId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["214"],"'useState' is defined but never used.","'Switch' is defined but never used.","React Hook useEffect has a missing dependency: 'getPosition'. Either include it or remove the dependency array. If 'getPosition' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["215"],"'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'setCount' is assigned a value but never used.","'result' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'count' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["216"],"'s' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},"Update the dependencies array to be: [pageTeam, pageSizeTeam, getTeams, name]",{"range":"229","text":"230"},"Update the dependencies array to be: [currentPage, setRequest, size]",{"range":"231","text":"232"},"Update the dependencies array to be: [getPlayers, pagePlayer, pageSizePlayer, userName]",{"range":"233","text":"234"},"Update the dependencies array to be: [setTeamSerialId, teamId]",{"range":"235","text":"236"},"Update the dependencies array to be: [getPosition]",{"range":"237","text":"238"},"Update the dependencies array to be: [count, props]",{"range":"239","text":"240"},[1358,1382],"[pageTeam, pageSizeTeam, getTeams, name]",[1037,1056],"[currentPage, setRequest, size]",[1740,1768],"[getPlayers, pagePlayer, pageSizePlayer, userName]",[779,781],"[setTeamSerialId, teamId]",[986,988],"[getPosition]",[783,785],"[count, props]"]