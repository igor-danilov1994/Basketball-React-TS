[{"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\index.tsx":"1","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\App.tsx":"3","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Login\\Login.tsx":"4","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Registration\\Registration.tsx":"5","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Header\\Header.tsx":"6","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Menu\\Menu.tsx":"7","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\Teams.tsx":"8","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Pagination\\Pagiation.tsx":"9","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\Players.tsx":"10","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayersEmpty\\PlayersEmpty.tsx":"11","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\AddPlayer\\AddPlayer.tsx":"12","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\CardEmpty\\CardEmpty.tsx":"13","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\AddTeams\\AddTeams.tsx":"14","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsEmpty\\TeamsEmpty.tsx":"15","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCard\\TeamsCard.tsx":"16","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayerCard\\Players–°ard.tsx":"17","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCardDetails\\TeamsCardDetails.tsx":"18","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\API\\api.ts":"19","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\assets\\FornControl\\Blocl_Buttons\\Blocl_Buttons.tsx":"20","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\assets\\FornControl\\AddImages\\AddImages.tsx":"21","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\authReducer.ts":"22","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\redux-store.ts":"23","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\playersReducer.ts":"24","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Main\\Main.tsx":"25","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\selectors.ts":"26","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayersCardDetails\\PlayersCardDetails.tsx":"27","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\BreadCrumbs\\BreadCrumbs.tsx":"28","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\SelectComponent\\SelectComponent.tsx":"29","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\AddPlayer\\Calendar\\CalendarComponent.tsx":"30","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCardDetails\\TeamRoster.tsx":"31","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\ErrorsMessage\\ErrorsMessage.tsx":"32","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\teamsReducer.ts":"33"},{"size":583,"mtime":1614850898221,"results":"34","hashOfConfig":"35"},{"size":425,"mtime":499162500000,"results":"36","hashOfConfig":"35"},{"size":888,"mtime":1615029637591,"results":"37","hashOfConfig":"35"},{"size":3064,"mtime":1615541054816,"results":"38","hashOfConfig":"35"},{"size":5016,"mtime":1615461242440,"results":"39","hashOfConfig":"35"},{"size":696,"mtime":1615365863748,"results":"40","hashOfConfig":"35"},{"size":2931,"mtime":1615367568136,"results":"41","hashOfConfig":"35"},{"size":3111,"mtime":1615461871666,"results":"42","hashOfConfig":"35"},{"size":3013,"mtime":1615463845104,"results":"43","hashOfConfig":"35"},{"size":3906,"mtime":1615463898793,"results":"44","hashOfConfig":"35"},{"size":331,"mtime":1613736409281,"results":"45","hashOfConfig":"35"},{"size":7997,"mtime":1615461242429,"results":"46","hashOfConfig":"35"},{"size":672,"mtime":1615458441295,"results":"47","hashOfConfig":"35"},{"size":4338,"mtime":1615465729402,"results":"48","hashOfConfig":"35"},{"size":331,"mtime":1613736436771,"results":"49","hashOfConfig":"35"},{"size":906,"mtime":1615216455149,"results":"50","hashOfConfig":"35"},{"size":1636,"mtime":1615463878321,"results":"51","hashOfConfig":"35"},{"size":3615,"mtime":1615533512756,"results":"52","hashOfConfig":"35"},{"size":4928,"mtime":1615461985028,"results":"53","hashOfConfig":"35"},{"size":459,"mtime":1612800607960,"results":"54","hashOfConfig":"35"},{"size":307,"mtime":1615467497911,"results":"55","hashOfConfig":"35"},{"size":2136,"mtime":1615360208311,"results":"56","hashOfConfig":"35"},{"size":400,"mtime":1615461914580,"results":"57","hashOfConfig":"35"},{"size":4174,"mtime":1615282218153,"results":"58","hashOfConfig":"35"},{"size":2224,"mtime":1615463632235,"results":"59","hashOfConfig":"35"},{"size":3312,"mtime":1614762673335,"results":"60","hashOfConfig":"35"},{"size":4554,"mtime":1615532852185,"results":"61","hashOfConfig":"35"},{"size":1091,"mtime":1615532986740,"results":"62","hashOfConfig":"35"},{"size":914,"mtime":1614166064013,"results":"63","hashOfConfig":"35"},{"size":425,"mtime":1614253054304,"results":"64","hashOfConfig":"35"},{"size":3939,"mtime":1615465439847,"results":"65","hashOfConfig":"35"},{"size":334,"mtime":1615459041184,"results":"66","hashOfConfig":"35"},{"size":3839,"mtime":1615193610193,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},"1fkb8xw",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"71"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"71"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"71"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"71"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"71"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"71"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"71"},"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\index.tsx",["143"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/toolkit/redux-store\";\n\n\nlet state = store.getState()\nconsole.log('index')\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </ Provider>\n        </ BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n",["144","145"],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\reportWebVitals.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\App.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Login\\Login.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Registration\\Registration.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Header\\Header.tsx",["146","147"],"import React, {useState} from 'react'\r\nimport logo from './images/logo.png'\r\nimport userAvatar from './images/profile.png'\r\nimport s from './Header.module.css'\r\nimport {connect} from 'react-redux'\r\nimport {getUserName} from \"../../Redux/toolkit/selectors\";\r\n\r\ntype HeaderPropsType = {\r\n    name: string\r\n}\r\n\r\n\r\nconst Header: React.FC<HeaderPropsType> = ({name}) => {\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.header_logo}>\r\n                <img src={logo} alt=\"logo\"/>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    name: getUserName(state)\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps)(Header)\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Menu\\Menu.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\Teams.tsx",["148"],"import React, {useEffect} from 'react'\r\nimport TeamsCard from \"./TeamsCard/TeamsCard\";\r\nimport Pagination from \"../Pagination/Pagiation\";\r\nimport {getPageSizeTeam, getPageTeam, getTeamsCount, getTeamsData, getUserName} from \"../../Redux/toolkit/selectors\";\r\nimport {getTeams} from \"../../Redux/toolkit/teamsReducer\"\r\nimport {connect} from \"react-redux\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {setTeamsRequest, setPageTeams, setTeamSerialId} from \"../../Redux/toolkit/teamsReducer\"\r\nimport searchIcon from \"../../assets/images/search.png\";\r\nimport total from \"../../totalStyle.module.css\";\r\n\r\ntype TeamsPropsType = {\r\n    name: string\r\n    pageTeam: number\r\n    pageSizeTeam: number\r\n    getTeams: (name: string, pageTeam: number, pageSizeTeam: number ) => void\r\n    teamsCount: number\r\n    teams: Array<any>\r\n    setTeamSerialId: (index: number) => void\r\n    setTeamsRequest: (pageTeam: number, pageSizeTeam: number) => void\r\n}\r\n\r\nconst Teams: React.FC <TeamsPropsType> = (\r\n    {getTeams, name, pageTeam, pageSizeTeam, teamsCount, teams, setTeamSerialId, setTeamsRequest}) => {\r\n\r\n\r\n    useEffect(() => {\r\n        getTeams(name, pageTeam, pageSizeTeam)\r\n    }, [pageTeam, pageSizeTeam])\r\n\r\n    return (\r\n        <>\r\n            {teamsCount !== 0 ?\r\n                <div className={total.mainBlock}>\r\n                    <div className={total.topElement}>\r\n\r\n                        <div className={total.topElement_search}>\r\n                            <input type=\"text\" placeholder='Search...'/>\r\n                            <img src={searchIcon} alt=\"search\"/>\r\n                        </div>\r\n\r\n                        <NavLink to='/main/addTeams'\r\n                                 className={`${total.btn} ${total.btn_add} ${total.topElement_btn}`}>\r\n                            <span>Add</span>\r\n                            <span>+</span>\r\n                        </NavLink>\r\n\r\n                    </div>\r\n\r\n                    <div className={total.mainBlock_card}>\r\n                        {teams.map((teams: any, index: number) =>\r\n                            <NavLink key={teams.id} to='/main/teamsCardDetails'\r\n                                     onClick={() => setTeamSerialId(index)}\r\n                            >\r\n                                <TeamsCard team={teams} key={index}/>\r\n                            </NavLink>\r\n                        )}\r\n                    </div>\r\n                    <Pagination\r\n                        page={pageTeam}\r\n                        pageSize={pageSizeTeam}\r\n                        pageCount={teamsCount}\r\n                        setRequest={setTeamsRequest}\r\n                    />\r\n                </div>\r\n                : <Redirect to=\"/main/teams_E\"/>}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: any) => ({\r\n    name: getUserName(state),\r\n    teams: getTeamsData(state),\r\n    pageTeam: getPageTeam(state),\r\n    teamsCount: getTeamsCount(state),\r\n    pageSizeTeam: getPageSizeTeam(state),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, {getTeams, setTeamsRequest, setTeamSerialId, setPageTeams})(Teams)\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Pagination\\Pagiation.tsx",["149"],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\Players.tsx",["150"],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayersEmpty\\PlayersEmpty.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\AddPlayer\\AddPlayer.tsx",["151"],"import React, {useState} from 'react';\r\nimport f from \"../../../assets/FornControl/FormControl.module.css\";\r\nimport total from \"../../../totalStyle.module.css\";\r\nimport AddImages from \"../../../assets/FornControl/AddImages/AddImages\";\r\nimport Block_Buttons from \"../../../assets/FornControl/Blocl_Buttons/Blocl_Buttons\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {connect} from \"react-redux\";\r\nimport arrowImg from '../../../assets/images/link.png'\r\nimport calendar from '../images/calendar.png'\r\nimport {savePlayers} from '../../../Redux/toolkit/playersReducer';\r\nimport {getPlayerName, getTeamsId, getTeamsNames} from '../../../Redux/toolkit/selectors';\r\nimport CalendarComponent from './Calendar/CalendarComponent';\r\nimport ErrorsMessage from \"../../ErrorsMessage/ErrorsMessage\";\r\n\r\n\r\nconst AddPlayer = (props: any) => {\r\n\r\n    const {register, handleSubmit, errors} = useForm()\r\n    const [activeRotatePosition, setActiveRotatePosition] = useState(false)\r\n    const [activeRotateTeam, setActiveRotateTeam] = useState(false)\r\n    const [activeImgLoading, setActiveImgLoading] = useState(false)\r\n    const [showCalendar, setShowCalendar] = useState(false)\r\n    const [birthday, onChangeBirthday] = useState('');\r\n    const [birthdayData, onChangeBirthdayData] = useState('');\r\n\r\n    let getBirthday = (date: any) => {\r\n        let month = (date.getMonth() + 1)\r\n        let FullYear = (date.getFullYear())\r\n        let dayLast = date.getDate()\r\n        let birthday: string = `${dayLast}.${month}.${FullYear}`\r\n\r\n        onChangeBirthday(birthday)\r\n        onChangeBirthdayData(date)\r\n    }\r\n\r\n    const onSubmit = (data: any) => {\r\n        data.birthday = birthdayData\r\n        props.savePlayers(data)\r\n    }\r\n\r\n    let setBirthday = (e: any) => {\r\n        onChangeBirthday(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className={f.add}>\r\n            <div className={total.breadCrumbs}>\r\n                Main/Players/NamePlayers\r\n            </div>\r\n            <div className={f.add_form}>\r\n                <div className={f.add_form_img} onClick={() => setActiveImgLoading(!activeImgLoading)}>\r\n                    <AddImages/>\r\n                    <input className={activeImgLoading ? `${f.active}` : \"\"}\r\n                           name='avatarUrl' ref={register({required: true})}\r\n                           accept=\"image/*\"\r\n                           type=\"file\"/>\r\n                </div>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <div>\r\n                        <div className={f.add_form_data}>\r\n                            <label className={total.text}>Name</label>\r\n                            <input name='name' ref={register({required: true})} type=\"text\"/>\r\n                            {errors.name &&\r\n                            <ErrorsMessage textMessage={'Name is required'}/>}\r\n                        </div>\r\n                        <div className={f.add_form_data}>\r\n                            <label className={total.text}>Position</label>\r\n                            <div className={total.select}\r\n                                 onClick={() => setActiveRotatePosition(!activeRotatePosition)}>\r\n                                <img\r\n                                    className={activeRotatePosition ? `${total.select_imgRotateOn}` : `${total.select_imgRotateOff}`}\r\n                                    src={arrowImg} alt=\"arrow\"/>\r\n\r\n\r\n                                <select name=\"position\" ref={register({required: true})}>\r\n                                    {props.positions.map((p: any) =>\r\n                                        <option key={p} value={p}>{p}</option>\r\n                                    )}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div className={f.add_form_data}>\r\n                            <label className={total.text}>Team</label>\r\n                            <div className={total.select} onClick={() => setActiveRotateTeam(!activeRotateTeam)}>\r\n                                <img\r\n                                    className={activeRotateTeam ? `${total.select_imgRotateOn}` : `${total.select_imgRotateOff}`}\r\n                                    src={arrowImg} alt=\"arrow\"/>\r\n                                <select name=\"team\" ref={register({required: true})}>\r\n                                    {props.teamsName.map((names: any, id: number) =>\r\n                                        <option key={props.teamsId[id]}\r\n                                                value={props.teamsId[id]}>\r\n                                            {names}\r\n                                        </option>\r\n                                    )}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div className={f.properties}>\r\n                            <div className={f.properties_options}>\r\n                                <div className={`${f.properties_data} ${f.add_form_data}`}>\r\n                                    <label>Height (cm)</label>\r\n                                    <input name='height' ref={register({required: true})}\r\n                                           type=\"text\"/>\r\n\r\n                                    {errors.height &&\r\n                                    <ErrorsMessage textMessage={'Height is required'}/>}\r\n                                </div>\r\n                                <div className={`${f.properties_data} ${f.add_form_data}`}>\r\n                                    <label>Weight (kg)</label>\r\n                                    <input name='weight' ref={register({required: true})} type=\"text\"/>\r\n\r\n                                    {errors.weight &&\r\n                                    <ErrorsMessage textMessage={'Weight is required'}/>}\r\n                                </div>\r\n                            </div>\r\n                            <div className={f.properties_options}>\r\n                                <div className={`${f.properties_data} ${f.add_form_data}`}>\r\n                                    <label>Birthday</label>\r\n                                    <div className={`${f.properties_data_calendar}`}>\r\n                                        <input placeholder='dd.mm.yy' value={birthday} onChange={setBirthday}\r\n                                               name='birthday' ref={register({required: true})} type=\"text\"/>\r\n\r\n                                        <img onClick={() => setShowCalendar(!showCalendar)} src={calendar}\r\n                                             alt=\"calendar\"/>\r\n\r\n                                        {showCalendar &&\r\n                                        <CalendarComponent getBirthday={getBirthday}/>}\r\n                                    </div>\r\n                                    {errors.birthday &&\r\n                                    <ErrorsMessage textMessage={'Birthday is required'}/>}\r\n                                </div>\r\n                                <div className={`${f.properties_data} ${f.add_form_data}`}>\r\n                                    <label>Number</label>\r\n                                    <input name='number' ref={register({required: true})} type=\"text\"/>\r\n                                    {errors.number &&\r\n                                    <ErrorsMessage textMessage={'Number is required'}/>}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Block_Buttons/>\r\n                </ form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n        positions: state.players.positions,\r\n        teamsId: getTeamsId(state),\r\n        playersName: getPlayerName(state),\r\n        teamsName: getTeamsNames(state)\r\n    }\r\n)\r\n\r\nexport default connect(mapStateToProps, {savePlayers})(AddPlayer);","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\CardEmpty\\CardEmpty.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\AddTeams\\AddTeams.tsx",["152"],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsEmpty\\TeamsEmpty.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCard\\TeamsCard.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayerCard\\Players–°ard.tsx",["153"],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCardDetails\\TeamsCardDetails.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\API\\api.ts",["154","155"],"import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://dev.trainee.dex-it.ru',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'accept': 'application/json',\r\n    },\r\n});\r\n\r\ntype authAPI = {\r\n    signUp: (data: any) => any\r\n    signIn: (data: any) => any\r\n}\r\n\r\nexport const authAPI: authAPI = {\r\n    async signUp(data) {\r\n        const promise = await instance.post(\"/api/Auth/SignUp\", {\r\n            \"userName\": data.userName,\r\n            \"login\": data.login,\r\n            \"password\": data.password\r\n        })\r\n        return promise\r\n    },\r\n    async signIn(data) {\r\n        const promise = await instance.post(\"/api/Auth/SignIn\", {\r\n            \"login\": data.login,\r\n            \"password\": data.password\r\n        })\r\n        localStorage.setItem('token', promise.data.token)\r\n        instance.defaults.headers.common['Authorization'] = `Bearer ${localStorage.getItem('token')}`\r\n        return promise\r\n    }\r\n}\r\n\r\nexport const Echo: object = {\r\n    echo() {\r\n        return instance.get(\"/api/Echo/Ping\")\r\n    }\r\n}\r\n\r\ntype playersAPI = {\r\n    getPositions: () => any\r\n    getPlayer: (id: number) => any\r\n    getPlayers: (name: string, pagePlayer: number, pageSizePlayer: number) => any\r\n    addPlayers: (data: any) => any\r\n    deletePlayers: (id: number) => any\r\n}\r\n\r\nexport const playersAPI: playersAPI = {\r\n    async getPositions() {\r\n        const promise = await instance.get('/api/Player/GetPositions')\r\n        return promise\r\n    },\r\n    async getPlayer(id) {\r\n        const promise = await instance.get('/api/Player/Get', {\r\n            params: {\r\n                id: id\r\n            }\r\n        })\r\n        return promise\r\n    },\r\n    async getPlayers(name, pagePlayer, pageSizePlayer) {\r\n        const promise = await instance.get('/api/Player/GetPlayers', {\r\n            params: {\r\n                Name: name,\r\n                Page: pagePlayer,\r\n                PageSize: pageSizePlayer\r\n            },\r\n        })\r\n        return promise\r\n    },\r\n    async addPlayers(data) {\r\n        const promise = await instance.post('/api/Player/Add', {\r\n            \"name\": data.name,\r\n            \"number\": data.number,\r\n            \"position\": data.position,\r\n            \"team\": data.team,\r\n            \"birthday\": data.birthday,\r\n            \"height\": data.height,\r\n            \"weight\": data.weight,\r\n            \"avatarUrl\": data.avatarUrl\r\n        })\r\n        return promise\r\n    },\r\n    async deletePlayers(id) {\r\n        const promise = await instance.delete('/api/Player/Delete', {\r\n            params: {\r\n                'id': id\r\n            }\r\n        })\r\n        return promise\r\n    }\r\n}\r\ntype teamsApiType = {\r\n    addTeam: (data: any) => any\r\n    updateTeam: (data: any, getCurrentTeamID: number) => any\r\n    deleteTeam: (getCurrentTeamID: number) => any\r\n    getTeams: (name: string, pageTeam: number, pageSizeTeam: number) => any\r\n    getTeam: (id: number) => any\r\n}\r\n\r\nexport const teamsAPI: teamsApiType = {\r\n    async addTeam(data) {\r\n        const promise = await instance.post('/api/Team/Add', {\r\n            \"name\": data.name,\r\n            \"foundationYear\": data.foundationYear,\r\n            \"division\": data.division,\r\n            \"conference\": data.conference,\r\n            \"imageUrl\": data.imageUrl,\r\n        })\r\n        return promise\r\n    },\r\n    async updateTeam(data, getCurrentTeamID) {\r\n        const promise = await instance.put('/api/Team/Update', {\r\n            \"name\": data.name,\r\n            \"foundationYear\": data.foundationYear,\r\n            \"division\": data.division,\r\n            \"conference\": data.conference,\r\n            \"imageUrl\": data.imageUrl,\r\n            \"id\": getCurrentTeamID\r\n        })\r\n        return promise\r\n    },\r\n    async deleteTeam(getCurrentTeamID) {\r\n        const promise = await instance.delete('/api/Team/Delete', {\r\n            params: {\r\n                'id': getCurrentTeamID\r\n            }\r\n\r\n        })\r\n        return promise\r\n    },\r\n    async getTeams(name, pageTeam, pageSizeTeam) {\r\n        const promise = await instance.get('/api/Team/GetTeams', {\r\n            params: {\r\n                Name: name,\r\n                Page: pageTeam,\r\n                PageSize: pageSizeTeam\r\n            },\r\n        })\r\n        return promise\r\n    },\r\n    async getTeam(id) {\r\n        const promise = await instance.get('/api/Team/Get', {\r\n            params: {\r\n                id: id\r\n            },\r\n        })\r\n        return promise\r\n    },\r\n}\r\n\r\ntype imageApiType = {\r\n    saveImage: (img: any) => any\r\n}\r\n\r\nexport const imageAPI: imageApiType = {\r\n    async saveImage(img) {\r\n        const formData = new FormData()\r\n        formData.append(\"file\", img)\r\n        const promise = await instance.post('/api/Image/SaveImage', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                },\r\n            }\r\n        )\r\n        return promise\r\n    },\r\n}","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\assets\\FornControl\\Blocl_Buttons\\Blocl_Buttons.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\assets\\FornControl\\AddImages\\AddImages.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\authReducer.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\redux-store.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\playersReducer.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Main\\Main.tsx",["156","157"],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\selectors.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayersCardDetails\\PlayersCardDetails.tsx",["158"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    getPlayersData,\r\n    getSerialPlayerID,\r\n    getSerialTeamID,\r\n    getTeamsData,\r\n} from '../../../Redux/toolkit/selectors';\r\nimport s from '../../../assets/Style/CardDetails/CardDetails.module.css'\r\nimport total from '../../../totalStyle.module.css'\r\nimport {connect} from \"react-redux\";\r\nimport BreadCrumbs from \"../../BreadCrumbs/BreadCrumbs\";\r\nimport {deletePlayer, getPlayer} from \"../../../Redux/toolkit/playersReducer\";\r\nimport {getTeam} from \"../../../Redux/toolkit/teamsReducer\";\r\n\r\n\r\nconst PlayersCardDetails = (props: any) => {\r\n    const [age, setAge] = useState<null | number>(null)\r\n\r\n    let dataPlayer = props.players[props.serialPlayerID]\r\n    let currentTeamName = props.team[props.serialPlayerID].name\r\n    let ROOT_IMAGES: string = 'http://dev.trainee.dex-it.ru'\r\n\r\n    let deletePlayers = () => {\r\n        props.deletePlayer(dataPlayer.id)\r\n    }\r\n\r\n    const getAgePlayer = () => {\r\n        let currentBirthday: string = dataPlayer.birthday.slice(0, 4)\r\n        const currentYear = new Date().getFullYear()\r\n\r\n        const result = currentYear - (Number(currentBirthday))\r\n\r\n        setAge(result)\r\n        return result\r\n    }\r\n\r\n    if (dataPlayer.birthday && age === null) {\r\n\r\n        let age = getAgePlayer()\r\n\r\n        setAge(age)\r\n    }\r\n\r\n    return (\r\n        <div className={s.cardDetails_wrapper}>\r\n\r\n            <BreadCrumbs katigories={'Players'} deleteItem={deletePlayers}\r\n                         pathAfterDeletion={'players'} name={dataPlayer.name}\r\n                         editPath={'addPlayer'}\r\n            />\r\n\r\n            <div className={s.cardDetails}>\r\n                <div style={{alignItems: \"flex-end\"}} className={s.cardDetails_img}>\r\n                    <img style={{width: \"100%\"}} src={`${ROOT_IMAGES}${dataPlayer.avatarUrl}`} alt=\"img\"/>\r\n                </div>\r\n                <div className={s.cardDetails_info}>\r\n                    <h1 className={total.text_big}>\r\n                        {dataPlayer.name}\r\n                        <span> #{dataPlayer.number}</span>\r\n                    </h1>\r\n                    <div className={s.cardDetails_description}>\r\n                        <div className={s.cardDetails_description_main}>\r\n                            <div className={s.cardDetails_skill}>\r\n                                <h3 className={total.text_middle}>Position</h3>\r\n                                <span className={total.text_small}>\r\n                                {dataPlayer.position}\r\n                            </span>\r\n                            </div>\r\n                            <div className={s.cardDetails_skill}>\r\n                                <h3 className={total.text_middle}>Team</h3>\r\n                                <span className={total.text_small}>\r\n                                {currentTeamName}\r\n                            </span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={s.cardDetails_description_main}>\r\n                            <div className={s.cardDetails_skill}>\r\n                                <h3 className={total.text_middle}>Height</h3>\r\n                                <span className={total.text_small}>\r\n                                {dataPlayer.height} cm\r\n                            </span>\r\n                            </div>\r\n                            <div className={s.cardDetails_skill}>\r\n                                <h3 className={total.text_middle}>Weight</h3>\r\n                                <span className={total.text_small}> {dataPlayer.weight} kg </span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={s.cardDetails_description_main}>\r\n                            <div className={s.cardDetails_skill}>\r\n                                <h3 className={total.text_middle}>Age</h3>\r\n                                <span className={total.text_small}> {age} </span>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: any) => ({\r\n    //player: state.players.data,\r\n    players: getPlayersData(state),\r\n    //teams: getTeamsNames(state),\r\n    team: getTeamsData(state),\r\n    serialPlayerID: getSerialPlayerID(state),\r\n    serialTeamsID: getSerialTeamID(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, {getTeam, getPlayer, deletePlayer})(PlayersCardDetails)","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\BreadCrumbs\\BreadCrumbs.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\SelectComponent\\SelectComponent.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\AddPlayer\\Calendar\\CalendarComponent.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCardDetails\\TeamRoster.tsx",["159","160","161","162","163"],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\ErrorsMessage\\ErrorsMessage.tsx",["164"],"import React from 'react'\r\nimport total from \"../../totalStyle.module.css\"\r\n\r\ntype ErrorsMessagePropsType = {\r\n    textMessage: string\r\n}\r\n\r\nconst ErrorsMessage: React.FC <ErrorsMessagePropsType> = ({textMessage}) => {\r\n    return (\r\n        <span className={total.error}>{textMessage}</span>\r\n    )\r\n}\r\n\r\nexport default ErrorsMessage","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\teamsReducer.ts",["165"],"import {createAction, createReducer} from \"@reduxjs/toolkit\"\r\nimport {imageAPI, teamsAPI} from \"../../API/api\"\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    data: [{\r\n        conference: null as string | null,\r\n        division: null as string | null,\r\n        foundationYear: null as number | null,\r\n        id: null as number | null,\r\n        imageUrl: null as string | null,\r\n        name: null as string | null,\r\n    }],\r\n    count: null as number | null,\r\n    pageTeam: 1,\r\n    pageSizeTeam: 6,\r\n    serialTeamID: null as number | null,\r\n}\r\n\r\ntype getTeamPayloadType = {\r\n    data: any\r\n    count: number\r\n}\r\n\r\ntype GetTeamType = {\r\n    type: typeof GET_TEAM\r\n    action: getTeamPayloadType\r\n}\r\n\r\nconst GET_TEAM: any = createAction('APP/SRC/REDUX/PLAYERS/GET_TEAMS')\r\nconst ADD_TEAM: any = createAction('APP/SRC/REDUX/PLAYERS/ADD_TEAM')\r\nconst SET_TEAM_PAGE: any = createAction('APP/SRC/REDUX/PLAYERS/SET_TEAM_PAGE')\r\nconst SET_TEAM_SIZE: any = createAction('APP/SRC/REDUX/PLAYERS/SET_TEAM_SIZE')\r\nexport const SET_SERIAL_TEAM_ID: any = createAction('APP/SRC/REDUX/PLAYERS/SET_SERIAL_TEAM_ID')\r\n\r\n\r\n//Thunk\r\nexport const setTeam: any = (data: any, getCurrentTeamID: number) => async (dispatch: any) => {\r\n    const promise = await imageAPI.saveImage(data.imageUrl[0])\r\n    if (promise.status === 200) {\r\n        data.imageUrl = promise.data\r\n        if (getCurrentTeamID) {\r\n            dispatch(updateTeam(data, getCurrentTeamID))\r\n        } else {\r\n            dispatch(addTeam(data))\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport const setTeamsRequest = (pageTeam: number, pageSizeTeam: number) => async (dispatch: any) => {\r\n    dispatch(SET_TEAM_PAGE(pageTeam))\r\n    dispatch(SET_TEAM_SIZE(pageSizeTeam))\r\n}\r\n\r\nexport const addTeam = (data: any) => async (dispatch: any) => {\r\n    const promise = await teamsAPI.addTeam(data)\r\n    if (promise.status === 200) {\r\n        dispatch(ADD_TEAM(promise.data))\r\n    }\r\n};\r\n\r\nexport const getTeam = (id: number) => async (dispatch: any) => {\r\n    const promise = await teamsAPI.getTeam(id)\r\n    if (promise.status === 200) {\r\n        dispatch(ADD_TEAM(promise.data))\r\n    }\r\n}\r\n\r\nexport const setPageTeams = (name: string, page: number, pageSize: number) => async (dispatch: any) => {\r\n    dispatch(getTeams(name, page, pageSize))\r\n}\r\n\r\nexport const updateTeam = (data: any, getCurrentTeamID: number) => async (dispatch: any) => {\r\n    const promise = await teamsAPI.updateTeam(data, getCurrentTeamID)\r\n    if (promise.status === 200) {\r\n        dispatch(addTeam(promise.data))\r\n    }\r\n}\r\n\r\nexport const deleteTeam = (getCurrentTeamID: number) => async (dispatch: any) => {\r\n    const promise = await teamsAPI.deleteTeam(getCurrentTeamID)\r\n    if (promise.status === 200) {\r\n        //dispatch(ADD_TEAM(promise.data))\r\n    }\r\n}\r\n\r\nexport const setTeamSerialId = (serialTeamsID: number) => (dispatch: any) => {\r\n    dispatch(SET_SERIAL_TEAM_ID(serialTeamsID))\r\n}\r\n\r\nexport const getTeams = (name: string, pageTeam: number, pageSizeTeam: number) => async (dispatch: any) => {\r\n    try {\r\n        const promise = await teamsAPI.getTeams(name, pageTeam, pageSizeTeam)\r\n        if (promise.status === 200) {\r\n            dispatch(GET_TEAM(promise.data))\r\n        }\r\n    }\r\n    catch (error) {\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default createReducer(initialState, {\r\n    [GET_TEAM]: (state, action) => {\r\n        state.data = action.payload.data\r\n        state.count = action.payload.count\r\n    },\r\n    [ADD_TEAM]: (state, action) => {\r\n        state.data = action.payload\r\n    },\r\n    [SET_SERIAL_TEAM_ID]: (state, action) => {\r\n        state.serialTeamID = action.payload\r\n    },\r\n    [SET_TEAM_PAGE]: (state, action) => {\r\n        state.pageTeam = action.payload\r\n    },\r\n    [SET_TEAM_SIZE]: (state, action) => {\r\n        state.pageSizeTeam = action.payload\r\n    },\r\n})\r\n\r\n",{"ruleId":"166","severity":1,"message":"167","line":10,"column":5,"nodeType":"168","messageId":"169","endLine":10,"endColumn":10},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"166","severity":1,"message":"174","line":1,"column":16,"nodeType":"168","messageId":"169","endLine":1,"endColumn":24},{"ruleId":"166","severity":1,"message":"175","line":3,"column":8,"nodeType":"168","messageId":"169","endLine":3,"endColumn":18},{"ruleId":"176","severity":1,"message":"177","line":29,"column":8,"nodeType":"178","endLine":29,"endColumn":32,"suggestions":"179"},{"ruleId":"176","severity":1,"message":"180","line":29,"column":8,"nodeType":"178","endLine":29,"endColumn":27,"suggestions":"181"},{"ruleId":"176","severity":1,"message":"182","line":36,"column":8,"nodeType":"178","endLine":36,"endColumn":36,"suggestions":"183"},{"ruleId":"184","severity":1,"message":"185","line":138,"column":21,"nodeType":"186","endLine":138,"endColumn":37},{"ruleId":"184","severity":1,"message":"185","line":87,"column":21,"nodeType":"186","endLine":87,"endColumn":37},{"ruleId":"176","severity":1,"message":"187","line":24,"column":8,"nodeType":"178","endLine":24,"endColumn":10,"suggestions":"188"},{"ruleId":"189","severity":1,"message":"190","line":16,"column":14,"nodeType":"168","messageId":"191","endLine":16,"endColumn":30},{"ruleId":"189","severity":1,"message":"192","line":50,"column":14,"nodeType":"168","messageId":"191","endLine":50,"endColumn":36},{"ruleId":"166","severity":1,"message":"193","line":3,"column":26,"nodeType":"168","messageId":"169","endLine":3,"endColumn":32},{"ruleId":"176","severity":1,"message":"194","line":21,"column":8,"nodeType":"178","endLine":21,"endColumn":10,"suggestions":"195"},{"ruleId":"166","severity":1,"message":"196","line":1,"column":16,"nodeType":"168","messageId":"169","endLine":1,"endColumn":25},{"ruleId":"166","severity":1,"message":"197","line":12,"column":12,"nodeType":"168","messageId":"169","endLine":12,"endColumn":16},{"ruleId":"166","severity":1,"message":"198","line":12,"column":18,"nodeType":"168","messageId":"169","endLine":12,"endColumn":25},{"ruleId":"166","severity":1,"message":"199","line":13,"column":19,"nodeType":"168","messageId":"169","endLine":13,"endColumn":27},{"ruleId":"166","severity":1,"message":"200","line":15,"column":9,"nodeType":"168","messageId":"169","endLine":15,"endColumn":15},{"ruleId":"176","severity":1,"message":"201","line":19,"column":8,"nodeType":"178","endLine":19,"endColumn":10,"suggestions":"202"},{"ruleId":"166","severity":1,"message":"203","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":9},{"ruleId":"166","severity":1,"message":"204","line":26,"column":6,"nodeType":"168","messageId":"169","endLine":26,"endColumn":17},"@typescript-eslint/no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["205"],"no-negated-in-lhs",["206"],"'useState' is defined but never used.","'userAvatar' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getTeams' and 'name'. Either include them or remove the dependency array. If 'getTeams' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["207"],"React Hook useEffect has a missing dependency: 'setRequest'. Either include it or remove the dependency array. If 'setRequest' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["208"],"React Hook useEffect has missing dependencies: 'getPlayers' and 'name'. Either include them or remove the dependency array. If 'getPlayers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["209"],"react/jsx-pascal-case","Imported JSX component Block_Buttons must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","React Hook useEffect has missing dependencies: 'setTeamSerialId' and 'teamId'. Either include them or remove the dependency array. If 'setTeamSerialId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["210"],"@typescript-eslint/no-redeclare","'authAPI' is already defined.","redeclared","'playersAPI' is already defined.","'Switch' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["211"],"'useEffect' is defined but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'setCount' is assigned a value but never used.","'result' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'count' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["212"],"'s' is defined but never used.","'GetTeamType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},"Update the dependencies array to be: [pageTeam, pageSizeTeam, getTeams, name]",{"range":"225","text":"226"},"Update the dependencies array to be: [currentPage, setRequest, size]",{"range":"227","text":"228"},"Update the dependencies array to be: [getPlayers, name, pagePlayer, pageSizePlayer]",{"range":"229","text":"230"},"Update the dependencies array to be: [setTeamSerialId, teamId]",{"range":"231","text":"232"},"Update the dependencies array to be: [props]",{"range":"233","text":"234"},"Update the dependencies array to be: [count, props]",{"range":"235","text":"236"},[1185,1209],"[pageTeam, pageSizeTeam, getTeams, name]",[1000,1019],"[currentPage, setRequest, size]",[1543,1571],"[getPlayers, name, pagePlayer, pageSizePlayer]",[779,781],"[setTeamSerialId, teamId]",[868,870],"[props]",[783,785],"[count, props]"]