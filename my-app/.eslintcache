[{"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\index.tsx":"1","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\App.tsx":"3","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Login\\Login.tsx":"4","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Registration\\Registration.tsx":"5","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Header\\Header.tsx":"6","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Menu\\Menu.tsx":"7","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\Teams.tsx":"8","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Pagination\\Pagiation.tsx":"9","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\Players.tsx":"10","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayersEmpty\\PlayersEmpty.tsx":"11","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\TopInnerElement\\TopInnerElement.tsx":"12","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\AddPlayer\\AddPlayer.tsx":"13","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\CardEmpty\\CardEmpty.tsx":"14","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\AddTeams\\AddTeams.tsx":"15","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsEmpty\\TeamsEmpty.tsx":"16","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCard\\TeamsCard.tsx":"17","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayerCard\\Players–°ard.tsx":"18","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCardDetails\\TeamsCardDetails.tsx":"19","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\API\\api.ts":"20","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\assets\\FornControl\\Blocl_Buttons\\Blocl_Buttons.tsx":"21","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\assets\\FornControl\\AddImages\\AddImages.tsx":"22","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\authReducer.ts":"23","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\redux-store.ts":"24","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\playersReducer.ts":"25","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\teamsReducer.ts.ts":"26","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Main\\Main.tsx":"27","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\selectors.ts":"28","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayersCardDetails\\PlayersCardDetails.tsx":"29","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\BreadCrumbs\\BreadCrumbs.tsx":"30","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\SelectComponent\\SelectComponent.tsx":"31","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\AddPlayer\\Calendar\\CalendarComponent.tsx":"32","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCardDetails\\TeamRoster.tsx":"33"},{"size":583,"mtime":1614850898221,"results":"34","hashOfConfig":"35"},{"size":425,"mtime":499162500000,"results":"36","hashOfConfig":"35"},{"size":888,"mtime":1615029637591,"results":"37","hashOfConfig":"35"},{"size":2916,"mtime":1615305790562,"results":"38","hashOfConfig":"35"},{"size":4980,"mtime":1615305790495,"results":"39","hashOfConfig":"35"},{"size":862,"mtime":1615217937541,"results":"40","hashOfConfig":"35"},{"size":2536,"mtime":1615273417599,"results":"41","hashOfConfig":"35"},{"size":3119,"mtime":1615273676405,"results":"42","hashOfConfig":"35"},{"size":3065,"mtime":1615301542130,"results":"43","hashOfConfig":"35"},{"size":3909,"mtime":1615273676395,"results":"44","hashOfConfig":"35"},{"size":331,"mtime":1613736409281,"results":"45","hashOfConfig":"35"},{"size":1103,"mtime":1613803666125,"results":"46","hashOfConfig":"35"},{"size":7969,"mtime":1615307393844,"results":"47","hashOfConfig":"35"},{"size":572,"mtime":1612160733666,"results":"48","hashOfConfig":"35"},{"size":3148,"mtime":1614928426485,"results":"49","hashOfConfig":"35"},{"size":331,"mtime":1613736436771,"results":"50","hashOfConfig":"35"},{"size":906,"mtime":1615216455149,"results":"51","hashOfConfig":"35"},{"size":1639,"mtime":1615210987277,"results":"52","hashOfConfig":"35"},{"size":3394,"mtime":1614765223366,"results":"53","hashOfConfig":"35"},{"size":4956,"mtime":1615192210141,"results":"54","hashOfConfig":"35"},{"size":459,"mtime":1612800607960,"results":"55","hashOfConfig":"35"},{"size":323,"mtime":1612800734175,"results":"56","hashOfConfig":"35"},{"size":2122,"mtime":1615192189494,"results":"57","hashOfConfig":"35"},{"size":407,"mtime":1614849114204,"results":"58","hashOfConfig":"35"},{"size":4174,"mtime":1615282218153,"results":"59","hashOfConfig":"35"},{"size":3839,"mtime":1615193610193,"results":"60","hashOfConfig":"35"},{"size":2264,"mtime":1614935818938,"results":"61","hashOfConfig":"35"},{"size":3312,"mtime":1614762673335,"results":"62","hashOfConfig":"35"},{"size":4553,"mtime":1615213757704,"results":"63","hashOfConfig":"35"},{"size":869,"mtime":1614674215531,"results":"64","hashOfConfig":"35"},{"size":914,"mtime":1614166064013,"results":"65","hashOfConfig":"35"},{"size":425,"mtime":1614253054304,"results":"66","hashOfConfig":"35"},{"size":4290,"mtime":1614694509351,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},"1fkb8xw",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"71"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"71"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"71"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"71"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"71"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"71"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"71"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"71"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"71"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"71"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"71"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"71"},"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\index.tsx",["148"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/toolkit/redux-store\";\n\n\nlet state = store.getState()\nconsole.log('index')\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </ Provider>\n        </ BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n",["149","150"],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\reportWebVitals.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\App.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Login\\Login.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Registration\\Registration.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Header\\Header.tsx",["151"],"import React, {useState} from 'react'\r\nimport logo from './images/logo.png'\r\nimport userAvatar from './images/profile.png'\r\nimport s from './Header.module.css'\r\nimport {connect} from 'react-redux'\r\nimport {getUserName} from \"../../Redux/toolkit/selectors\";\r\n\r\ntype HeaderPropsType = {\r\n    name: string\r\n}\r\n\r\nconst Header: React.FC<HeaderPropsType> = ({name}) => {\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.header_logo}>\r\n                <img src={logo} alt=\"logo\"/>\r\n            </div>\r\n            <div className={s.header_userInfo}>\r\n                <span> {name} </span>\r\n                <img src={userAvatar} alt=\"userAvatar\"/>\r\n            </div>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    name: getUserName(state)\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps)(Header)\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Menu\\Menu.tsx",["152"],"import React, {useEffect, useState} from 'react'\r\nimport s from './menu.module.css'\r\nimport teamsShow from './images/menu_teamsShow.png'\r\nimport teamsHidden from './images/menu_teamsHidden.png'\r\nimport playersShow from './images/menu_playersShow.png'\r\nimport playersHidden from './images/menu_playersHidden.png'\r\nimport inputIcon from '../../assets/images/inputIcon.png'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {connect} from \"react-redux\";\r\nimport total from '../../totalStyle.module.css'\r\nimport {signOut} from \"../../Redux/toolkit/authReducer\";\r\n\r\ntype MenuPropsType = {\r\n    signOut: () => void\r\n}\r\n\r\nconst Menu: React.FC<MenuPropsType> = ({signOut}) => {\r\n\r\n    const [active, setActive] = useState(false)\r\n    const [showMenu, setShowMenu] = useState(true)\r\n\r\n    const toggleActive = () => {\r\n        setActive(!active)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={() => setShowMenu(!showMenu)} className={s.nav_burger}>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n            </div>\r\n\r\n            {showMenu && <>\r\n                <div className={total.gradient}></div>\r\n                <nav className={s.nav}>\r\n                    <div className={s.nav_header}>\r\n                        <div onClick={toggleActive} className={`${s.nav_item}`}>\r\n                            <NavLink to='/main/teams'>\r\n                                <img src={active ? teamsShow : teamsHidden} alt=\"img\"/>\r\n                                <span className={total.text_extraSmall}>Teams</span>\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                        <div className={`${s.nav_item} ${s.menu_players}`}>\r\n                            <NavLink onClick={toggleActive} to='/main/players'>\r\n                                <img src={active ? playersHidden : playersShow} alt=\"img\"/>\r\n                                <span className={total.text_extraSmall}>Players</span>\r\n                            </NavLink>\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.nav_footer}>\r\n                        <NavLink to='/signIn' onClick={() => signOut()}>\r\n                            <img src={inputIcon} alt=\"iconImg\"/>\r\n                            <span className={total.text_extraSmall}>Sign out</span>\r\n                        </NavLink>\r\n                    </div>\r\n                </nav>\r\n            </>}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(null,{signOut})(Menu)\r\n\r\n\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\Teams.tsx",["153"],"import React, {useEffect} from 'react'\r\nimport TeamsCard from \"./TeamsCard/TeamsCard\";\r\nimport Pagination from \"../Pagination/Pagiation\";\r\nimport {getPageSizeTeam, getPageTeam, getTeamsCount, getTeamsData, getUserName} from \"../../Redux/toolkit/selectors\";\r\nimport {getTeams} from \"../../Redux/toolkit/teamsReducer.ts\";\r\nimport {connect} from \"react-redux\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {setTeamsRequest, setPageTeams, setTeamSerialId} from \"../../Redux/toolkit/teamsReducer.ts\";\r\nimport searchIcon from \"../../assets/images/search.png\";\r\nimport total from \"../../totalStyle.module.css\";\r\n\r\ntype TeamsPropsType = {\r\n    name: string\r\n    pageTeam: number\r\n    pageSizeTeam: number\r\n    getTeams: (name: string, pageTeam: number, pageSizeTeam: number ) => void\r\n    teamsCount: number\r\n    teams: Array<any>\r\n    setTeamSerialId: (index: number) => void\r\n    setTeamsRequest: (pageTeam: number, pageSizeTeam: number) => void\r\n}\r\n\r\nconst Teams: React.FC <TeamsPropsType> = (\r\n    {getTeams, name, pageTeam, pageSizeTeam, teamsCount, teams, setTeamSerialId, setTeamsRequest}) => {\r\n\r\n\r\n    useEffect(() => {\r\n        getTeams(name, pageTeam, pageSizeTeam)\r\n    }, [pageTeam, pageSizeTeam])\r\n\r\n    return (\r\n        <>\r\n            {teamsCount !== 0 ?\r\n                <div className={total.mainBlock}>\r\n                    <div className={total.topElement}>\r\n\r\n                        <div className={total.topElement_search}>\r\n                            <input type=\"text\" placeholder='Search...'/>\r\n                            <img src={searchIcon} alt=\"search\"/>\r\n                        </div>\r\n\r\n                        <NavLink to='/main/addTeams'\r\n                                 className={`${total.btn} ${total.btn_add} ${total.topElement_btn}`}>\r\n                            <span>Add</span>\r\n                            <span>+</span>\r\n                        </NavLink>\r\n\r\n                    </div>\r\n\r\n                    <div className={total.mainBlock_card}>\r\n                        {teams.map((teams: any, index: number) =>\r\n                            <NavLink key={teams.id} to='/main/teamsCardDetails'\r\n                                     onClick={() => setTeamSerialId(index)}\r\n                            >\r\n                                <TeamsCard team={teams} key={index}/>\r\n                            </NavLink>\r\n                        )}\r\n                    </div>\r\n                    <Pagination\r\n                        page={pageTeam}\r\n                        pageSize={pageSizeTeam}\r\n                        pageCount={teamsCount}\r\n                        setRequest={setTeamsRequest}\r\n                    />\r\n                </div>\r\n                : <Redirect to=\"/main/teams_E\"/>}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: any) => ({\r\n    name: getUserName(state),\r\n    teams: getTeamsData(state),\r\n    pageTeam: getPageTeam(state),\r\n    teamsCount: getTeamsCount(state),\r\n    pageSizeTeam: getPageSizeTeam(state),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, {getTeams, setTeamsRequest, setTeamSerialId, setPageTeams})(Teams)\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Pagination\\Pagiation.tsx",["154","155"],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\Players.tsx",["156","157"],"import React, {useEffect} from 'react'\r\nimport PlayerCard from \"./PlayerCard/Players–°ard\";\r\nimport Pagination from \"../Pagination/Pagiation\";\r\nimport {connect} from \"react-redux\";\r\nimport {getPagePlayer, getPageSizePlayer, getPlayersCount, getPlayersData,\r\n    getPlayersNames, getUserName} from '../../Redux/toolkit/selectors';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport total from \"../../totalStyle.module.css\";\r\nimport searchIcon from \"../../assets/images/search.png\";\r\nimport {setPlayersRequest, getPlayers, setSerialPlayersID} from \"../../Redux/toolkit/playersReducer\";\r\nimport {getTeams} from \"../../Redux/toolkit/teamsReducer.ts\";\r\nimport SelectComponent from \"../SelectComponent/SelectComponent\";\r\n\r\ntype PlayersPropsType = {\r\n    name: string\r\n    pagePlayer: number\r\n    pageSizePlayer: number\r\n    playersCount: number\r\n    playersName: Array<string>\r\n    getPlayers: (name: string, pagePlayer: number, pageSizePlayer: number) => void\r\n    getTeams: (name: string, pagePlayer: number, pageSizePlayer: number) => void\r\n    setSerialPlayersID: (index: number) => void\r\n    setPlayersRequest: (pagePlayer: number, pageSizePlayer: number) => void\r\n    players: Array<any>\r\n}\r\n\r\nconst Players: React.FC<PlayersPropsType> = (\r\n    {\r\n        name, pagePlayer, getPlayers, players, setSerialPlayersID, setPlayersRequest,\r\n        pageSizePlayer, playersCount, playersName\r\n    }) => {\r\n\r\n    useEffect(() => {\r\n        getPlayers(name, pagePlayer, pageSizePlayer)\r\n        getTeams(name, pagePlayer, pageSizePlayer)\r\n    }, [pagePlayer, pageSizePlayer])\r\n\r\n    return (\r\n        <>\r\n            {playersCount !== 0 ?\r\n                <div className={total.mainBlock}>\r\n\r\n                    <div className={total.topElement}>\r\n                        <div className={total.topElement_options}>\r\n                            <div className={total.topElement_search}>\r\n                                <input type=\"text\" placeholder='Search...'/>\r\n                                <img src={searchIcon} alt=\"search\"/>\r\n                            </div>\r\n\r\n                            <SelectComponent options={playersName} isMulti={true}\r\n                                             closeMenuOnSelect={false}\r\n                            />\r\n\r\n                        </div>\r\n\r\n                        <NavLink to='/main/addPlayer'\r\n                                 className={`${total.btn} ${total.btn_add} ${total.topElement_btn}`}>\r\n                            <span>Add</span>\r\n                            <span>+</span>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div className={total.mainBlock_card}>\r\n                        {players.map((players: any, index: number) =>\r\n                            <NavLink key={players.id} onClick={() => setSerialPlayersID(index)}\r\n                                     to='/main/playersCardDetails'>\r\n                                <PlayerCard key={index} player={players} teamId={players.team}\r\n\r\n                                />\r\n                            </NavLink>\r\n                        )}\r\n                    </div>\r\n                    <Pagination\r\n                        page={pagePlayer}\r\n                        pageSize={pageSizePlayer}\r\n                        pageCount={playersCount}\r\n                        setRequest={setPlayersRequest}/>\r\n                </div>\r\n                : <Redirect to=\"/main/players_E\"/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    name: getUserName(state),\r\n    players: getPlayersData(state),\r\n    playersName: getPlayersNames(state),\r\n    playersCount: getPlayersCount(state),\r\n    pagePlayer: getPagePlayer(state),\r\n    pageSizePlayer: getPageSizePlayer(state),\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    getTeams, setPlayersRequest, getPlayers,\r\n    setSerialPlayersID\r\n})(Players)\r\n\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayersEmpty\\PlayersEmpty.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\TopInnerElement\\TopInnerElement.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\AddPlayer\\AddPlayer.tsx",["158"],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\CardEmpty\\CardEmpty.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\AddTeams\\AddTeams.tsx",["159"],"import React, {useState} from 'react';\r\nimport f from \"../../../assets/FornControl/FormControl.module.css\";\r\nimport total from \"../../../totalStyle.module.css\";\r\nimport AddImages from \"../../../assets/FornControl/AddImages/AddImages\";\r\nimport Block_Buttons from \"../../../assets/FornControl/Blocl_Buttons/Blocl_Buttons\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {setTeam, updateTeam} from \"../../../Redux/toolkit/teamsReducer.ts\";\r\n\r\n\r\nconst AddTeams = (props: any) => {\r\n    //debugger\r\n    const onSubmit = (data: any) => {\r\n        data.foundationYear = Number(data.foundationYear)\r\n        let getCurrentTeamID = null\r\n\r\n        if (props.serialTeamID) {\r\n            getCurrentTeamID = props.teams[props.serialTeamID].id\r\n        }\r\n        props.setTeam(data, getCurrentTeamID)\r\n    }\r\n    const {register, handleSubmit} = useForm()\r\n    const [activeImgLoading, setActiveImgLoading] = useState(false)\r\n\r\n    let toggleShowImgLoading = () => {\r\n        setActiveImgLoading(!activeImgLoading)\r\n    }\r\n\r\n    return (\r\n        <div className={f.add}>\r\n            <div className={total.breadCrumbs}>\r\n                Main/Teams/{props.serialTeamID ? props.teamsName : 'NewTeam'}\r\n            </div>\r\n            <div className={f.add_form}>\r\n                <div className={f.add_form_img} onClick={toggleShowImgLoading}>\r\n                    <AddImages/>\r\n                    <input className={activeImgLoading ? `${f.active}` : \"\"}\r\n                           name='imageUrl' ref={register({ required: true })}\r\n                           accept=\"image/*\"\r\n                           type=\"file\"/>\r\n                </div>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <div>\r\n                        <div className={f.add_form_data}>\r\n                            <label className={total.text}>Name</label>\r\n                            <input name='name' ref={register({ required: true })} type=\"text\"/>\r\n                        </div>\r\n                        <div className={f.add_form_data}>\r\n                            <label className={total.text}>Division</label>\r\n                            <input name='division' ref={register({ required: true })} type=\"text\"/>\r\n                        </div>\r\n                        <div className={f.add_form_data}>\r\n                            <label className={total.text}>Conference</label>\r\n                            <input name='conference' ref={register({ required: true })} type=\"text\"/>\r\n                        </div>\r\n                        <div className={f.add_form_data}>\r\n                            <label className={total.text} htmlFor=\"\">Year of foundation</label>\r\n                            <input name='foundationYear' ref={register({ required: true })} type=\"text\"/>\r\n                        </div>\r\n                    </div>\r\n                    <Block_Buttons/>\r\n                </ form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    //teams: state.teams\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {setTeam, updateTeam})(AddTeams);\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsEmpty\\TeamsEmpty.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCard\\TeamsCard.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayerCard\\Players–°ard.tsx",["160"],"import React, {useEffect, useState} from 'react'\r\nimport s from \"../../../assets/Style/CardLayout/CardLayout.module.css\"\r\nimport total from \"../../../totalStyle.module.css\"\r\nimport {connect} from \"react-redux\"\r\nimport {getTeamsForId} from \"../../../Redux/toolkit/selectors\"\r\nimport {setTeamSerialId} from \"../../../Redux/toolkit/teamsReducer.ts\"\r\n\r\nconst ROOT_IMAGES: string = 'http://dev.trainee.dex-it.ru'\r\n\r\ntype PlayerCardPropsType = {\r\n    teamId: number\r\n    teamName: Array<any>\r\n    player: any\r\n    setTeamSerialId: (teamId: number) => void\r\n}\r\n\r\nconst PlayerCard: React.FC<PlayerCardPropsType> = (\r\n    {setTeamSerialId, teamId, teamName, player,}) => {\r\n\r\n    const [nameTeam, setNameTeam] = useState('')\r\n\r\n    useEffect(() => {\r\n        setTeamSerialId(teamId)\r\n    }, [])\r\n\r\n\r\n    if (teamName.length > 0 && nameTeam === '') {\r\n        setNameTeam(teamName[0].name)\r\n    }\r\n\r\n    return (\r\n        <div className={s.cardLayout}>\r\n            <div className={`${s.cardLayout_image} ${s.cardLayout_face}`}>\r\n                <img src={` ${ROOT_IMAGES}${player.avatarUrl}`} alt=\"avatar\"/>\r\n            </div>\r\n            <div className={s.cardLayout_description}>\r\n                    <span className={total.text_small}>\r\n                        {player.name}\r\n                        <span>#{player.number}</span>\r\n                    </span>\r\n\r\n                <span className={total.text_middle14}>{nameTeam}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    teamName: getTeamsForId(state)\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {setTeamSerialId})(PlayerCard)\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCardDetails\\TeamsCardDetails.tsx",["161","162"],"import React, {useEffect} from 'react';\r\nimport {getPlayersData, getSerialTeamID, getTeamsData} from '../../../Redux/toolkit/selectors';\r\nimport s from '../../../assets/Style/CardDetails/CardDetails.module.css'\r\nimport total from '../../../totalStyle.module.css'\r\nimport {connect} from \"react-redux\";\r\nimport BreadCrumbs from '../../BreadCrumbs/BreadCrumbs';\r\nimport {getTeams, getTeam, deleteTeam} from \"../../../Redux/toolkit/teamsReducer.ts\";\r\nimport TeamRoster from './TeamRoster';\r\n\r\nconst TeamsCardDetails = (props: any) => {\r\n\r\n    let dataTeams = props.teams[props.serialTeamID]\r\n    debugger\r\n\r\n    let deleteTeam = () => {\r\n        props.deleteTeam(dataTeams.id)\r\n    }\r\n    let ROOT_IMAGES: string = 'http://dev.trainee.dex-it.ru'\r\n\r\n\r\n    return (\r\n        <div className={s.cardDetails_teams}>\r\n            <div className={s.cardDetails_wrapper}>\r\n                <BreadCrumbs katigories={'Teams'}\r\n                             editPath={'addTeams'}\r\n                             pathAfterDeletion={'teams'}\r\n                             name={dataTeams.name}\r\n                             delete={deleteTeam}\r\n                />\r\n\r\n                <div className={s.cardDetails}>\r\n                    <div className={s.cardDetails_img}>\r\n                        <img src={`${ROOT_IMAGES}${dataTeams.imageUrl}`} alt=\"img\"/>\r\n                    </div>\r\n                    <div className={s.cardDetails_info}>\r\n                        <h1 className={total.text_big}>\r\n                            {dataTeams.name}\r\n                        </h1>\r\n                        <div className={s.cardDetails_description}>\r\n                            <div className={s.cardDetails_description_main}>\r\n                                <div className={s.cardDetails_skill}>\r\n                                    <h3 className={total.text_middle}>Year of foundation</h3>\r\n                                    <span className={total.text_small}>\r\n                                {dataTeams.foundationYear}\r\n                            </span>\r\n                                </div>\r\n\r\n                                <div className={s.cardDetails_skill}>\r\n                                    <h3 className={total.text_middle}>Division</h3>\r\n                                    <span className={total.text_small}>\r\n                                {dataTeams.division}\r\n                            </span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className={s.cardDetails_description_main}>\r\n                                <div className={s.cardDetails_skill}>\r\n                                    <h3 className={total.text_middle}>Conference</h3>\r\n                                    <span className={total.text_small}>\r\n                                {dataTeams.conference}\r\n                            </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <TeamRoster teamId={dataTeams.id}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: any) => ({\r\n    //players: getPlayersData(state),\r\n    teams: getTeamsData(state),\r\n    serialTeamID: getSerialTeamID(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, {getTeams, getTeam, deleteTeam})(TeamsCardDetails)","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\API\\api.ts",["163","164","165"],"import axios from \"axios\";\r\nimport {fstat} from \"fs\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://dev.trainee.dex-it.ru',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'accept': 'application/json',\r\n    },\r\n});\r\n\r\ntype authAPI = {\r\n    signUp: (data: any) => any\r\n    signIn: (data: any) => any\r\n}\r\n\r\nexport const authAPI: authAPI = {\r\n    async signUp(data) {\r\n        const promise = await instance.post(\"/api/Auth/SignUp\", {\r\n            \"userName\": data.userName,\r\n            \"login\": data.login,\r\n            \"password\": data.password\r\n        })\r\n        return promise\r\n    },\r\n    async signIn(data) {\r\n        const promise = await instance.post(\"/api/Auth/SignIn\", {\r\n            \"login\": data.login,\r\n            \"password\": data.password\r\n        })\r\n        localStorage.setItem('token', promise.data.token)\r\n        instance.defaults.headers.common['Authorization'] = `Bearer ${localStorage.getItem('token')}`\r\n        return promise\r\n    }\r\n}\r\n\r\nexport const Echo: object = {\r\n    echo() {\r\n        return instance.get(\"/api/Echo/Ping\")\r\n    }\r\n}\r\n\r\ntype playersAPI = {\r\n    getPositions: () => any\r\n    getPlayer: (id: number) => any\r\n    getPlayers: (name: string, pagePlayer: number, pageSizePlayer: number) => any\r\n    addPlayers: (data: any) => any\r\n    deletePlayers: (id: number) => any\r\n}\r\n\r\nexport const playersAPI: playersAPI = {\r\n    async getPositions() {\r\n        const promise = await instance.get('/api/Player/GetPositions')\r\n        return promise\r\n    },\r\n    async getPlayer(id) {\r\n        const promise = await instance.get('/api/Player/Get', {\r\n            params: {\r\n                id: id\r\n            }\r\n        })\r\n        return promise\r\n    },\r\n    async getPlayers(name, pagePlayer, pageSizePlayer) {\r\n        const promise = await instance.get('/api/Player/GetPlayers', {\r\n            params: {\r\n                Name: name,\r\n                Page: pagePlayer,\r\n                PageSize: pageSizePlayer\r\n            },\r\n        })\r\n        return promise\r\n    },\r\n    async addPlayers(data) {\r\n        const promise = await instance.post('/api/Player/Add', {\r\n            \"name\": data.name,\r\n            \"number\": data.number,\r\n            \"position\": data.position,\r\n            \"team\": data.team,\r\n            \"birthday\": data.birthday,\r\n            \"height\": data.height,\r\n            \"weight\": data.weight,\r\n            \"avatarUrl\": data.avatarUrl\r\n        })\r\n        return promise\r\n    },\r\n    async deletePlayers(id) {\r\n        const promise = await instance.delete('/api/Player/Delete', {\r\n            params: {\r\n                'id': id\r\n            }\r\n        })\r\n        return promise\r\n    }\r\n}\r\ntype teamsApiType = {\r\n    addTeam: (data: any) => any\r\n    updateTeam: (data: any, getCurrentTeamID: number) => any\r\n    deleteTeam: (getCurrentTeamID: number) => any\r\n    getTeams: (name: string, pageTeam: number, pageSizeTeam: number) => any\r\n    getTeam: (id: number) => any\r\n}\r\n\r\nexport const teamsAPI: teamsApiType = {\r\n    async addTeam(data) {\r\n        const promise = await instance.post('/api/Team/Add', {\r\n            \"name\": data.name,\r\n            \"foundationYear\": data.foundationYear,\r\n            \"division\": data.division,\r\n            \"conference\": data.conference,\r\n            \"imageUrl\": data.imageUrl,\r\n        })\r\n        return promise\r\n    },\r\n    async updateTeam(data, getCurrentTeamID) {\r\n        const promise = await instance.put('/api/Team/Update', {\r\n            \"name\": data.name,\r\n            \"foundationYear\": data.foundationYear,\r\n            \"division\": data.division,\r\n            \"conference\": data.conference,\r\n            \"imageUrl\": data.imageUrl,\r\n            \"id\": getCurrentTeamID\r\n        })\r\n        return promise\r\n    },\r\n    async deleteTeam(getCurrentTeamID) {\r\n        const promise = await instance.delete('/api/Team/Delete', {\r\n            params: {\r\n                'id': getCurrentTeamID\r\n            }\r\n\r\n        })\r\n        return promise\r\n    },\r\n    async getTeams(name, pageTeam, pageSizeTeam) {\r\n        const promise = await instance.get('/api/Team/GetTeams', {\r\n            params: {\r\n                Name: name,\r\n                Page: pageTeam,\r\n                PageSize: pageSizeTeam\r\n            },\r\n        })\r\n        return promise\r\n    },\r\n    async getTeam(id) {\r\n        const promise = await instance.get('/api/Team/Get', {\r\n            params: {\r\n                id: id\r\n            },\r\n        })\r\n        return promise\r\n    },\r\n}\r\n\r\ntype imageApiType = {\r\n    saveImage: (img: any) => any\r\n}\r\n\r\nexport const imageAPI: imageApiType = {\r\n    async saveImage(img) {\r\n        const formData = new FormData()\r\n        formData.append(\"file\", img)\r\n        const promise = await instance.post('/api/Image/SaveImage', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                },\r\n            }\r\n        )\r\n        return promise\r\n    },\r\n}","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\assets\\FornControl\\Blocl_Buttons\\Blocl_Buttons.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\assets\\FornControl\\AddImages\\AddImages.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\authReducer.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\redux-store.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\playersReducer.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\teamsReducer.ts.ts",["166"],"import {createAction, createReducer} from \"@reduxjs/toolkit\"\r\nimport {imageAPI, teamsAPI} from \"../../API/api\"\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    data: [{\r\n        conference: null as string | null,\r\n        division: null as string | null,\r\n        foundationYear: null as number | null,\r\n        id: null as number | null,\r\n        imageUrl: null as string | null,\r\n        name: null as string | null,\r\n    }],\r\n    count: null as number | null,\r\n    pageTeam: 1,\r\n    pageSizeTeam: 6,\r\n    serialTeamID: null as number | null,\r\n}\r\n\r\ntype getTeamPayloadType = {\r\n    data: any\r\n    count: number\r\n}\r\n\r\ntype GetTeamType = {\r\n    type: typeof GET_TEAM\r\n    action: getTeamPayloadType\r\n}\r\n\r\nconst GET_TEAM: any = createAction('APP/SRC/REDUX/PLAYERS/GET_TEAMS')\r\nconst ADD_TEAM: any = createAction('APP/SRC/REDUX/PLAYERS/ADD_TEAM')\r\nconst SET_TEAM_PAGE: any = createAction('APP/SRC/REDUX/PLAYERS/SET_TEAM_PAGE')\r\nconst SET_TEAM_SIZE: any = createAction('APP/SRC/REDUX/PLAYERS/SET_TEAM_SIZE')\r\nexport const SET_SERIAL_TEAM_ID: any = createAction('APP/SRC/REDUX/PLAYERS/SET_SERIAL_TEAM_ID')\r\n\r\n\r\n//Thunk\r\nexport const setTeam: any = (data: any, getCurrentTeamID: number) => async (dispatch: any) => {\r\n    const promise = await imageAPI.saveImage(data.imageUrl[0])\r\n    if (promise.status === 200) {\r\n        data.imageUrl = promise.data\r\n        if (getCurrentTeamID) {\r\n            dispatch(updateTeam(data, getCurrentTeamID))\r\n        } else {\r\n            dispatch(addTeam(data))\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport const setTeamsRequest = (pageTeam: number, pageSizeTeam: number) => async (dispatch: any) => {\r\n    dispatch(SET_TEAM_PAGE(pageTeam))\r\n    dispatch(SET_TEAM_SIZE(pageSizeTeam))\r\n}\r\n\r\nexport const addTeam = (data: any) => async (dispatch: any) => {\r\n    const promise = await teamsAPI.addTeam(data)\r\n    if (promise.status === 200) {\r\n        dispatch(ADD_TEAM(promise.data))\r\n    }\r\n};\r\n\r\nexport const getTeam = (id: number) => async (dispatch: any) => {\r\n    const promise = await teamsAPI.getTeam(id)\r\n    if (promise.status === 200) {\r\n        dispatch(ADD_TEAM(promise.data))\r\n    }\r\n}\r\n\r\nexport const setPageTeams = (name: string, page: number, pageSize: number) => async (dispatch: any) => {\r\n    dispatch(getTeams(name, page, pageSize))\r\n}\r\n\r\nexport const updateTeam = (data: any, getCurrentTeamID: number) => async (dispatch: any) => {\r\n    const promise = await teamsAPI.updateTeam(data, getCurrentTeamID)\r\n    if (promise.status === 200) {\r\n        dispatch(addTeam(promise.data))\r\n    }\r\n}\r\n\r\nexport const deleteTeam = (getCurrentTeamID: number) => async (dispatch: any) => {\r\n    const promise = await teamsAPI.deleteTeam(getCurrentTeamID)\r\n    if (promise.status === 200) {\r\n        //dispatch(ADD_TEAM(promise.data))\r\n    }\r\n}\r\n\r\nexport const setTeamSerialId = (serialTeamsID: number) => (dispatch: any) => {\r\n    dispatch(SET_SERIAL_TEAM_ID(serialTeamsID))\r\n}\r\n\r\nexport const getTeams = (name: string, pageTeam: number, pageSizeTeam: number) => async (dispatch: any) => {\r\n    try {\r\n        const promise = await teamsAPI.getTeams(name, pageTeam, pageSizeTeam)\r\n        if (promise.status === 200) {\r\n            dispatch(GET_TEAM(promise.data))\r\n        }\r\n    }\r\n    catch (error) {\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default createReducer(initialState, {\r\n    [GET_TEAM]: (state, action) => {\r\n        state.data = action.payload.data\r\n        state.count = action.payload.count\r\n    },\r\n    [ADD_TEAM]: (state, action) => {\r\n        state.data = action.payload\r\n    },\r\n    [SET_SERIAL_TEAM_ID]: (state, action) => {\r\n        state.serialTeamID = action.payload\r\n    },\r\n    [SET_TEAM_PAGE]: (state, action) => {\r\n        state.pageTeam = action.payload\r\n    },\r\n    [SET_TEAM_SIZE]: (state, action) => {\r\n        state.pageSizeTeam = action.payload\r\n    },\r\n})\r\n\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Main\\Main.tsx",["167","168","169"],"import React, {useEffect} from 'react'\r\nimport '../../App.css'\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Header from '../Header/Header';\r\nimport Menu from \"../Menu/Menu\";\r\nimport Teams from \"../Teams/Teams\";\r\nimport TeamsEmpty from '../Teams/TeamsEmpty/TeamsEmpty';\r\nimport TeamsCardDetails from \"../Teams/TeamsCardDetails/TeamsCardDetails\";\r\nimport Players from '../Players/Players';\r\nimport PlayersEmpty from \"../Players/PlayersEmpty/PlayersEmpty\";\r\nimport AddPlayer from '../Players/AddPlayer/AddPlayer';\r\nimport AddTeams from '../Teams/AddTeams/AddTeams';\r\nimport PlayersCardDetails from '../Players/PlayersCardDetails/PlayersCardDetails';\r\nimport {connect} from \"react-redux\";\r\nimport {getPosition} from \"../../Redux/toolkit/playersReducer\";\r\n\r\n\r\nconst Main = (props: any) => {\r\n    useEffect(() => {\r\n        props.getPosition()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <div className=\"app-content\">\r\n                <Menu/>\r\n                <div className=\"main\">\r\n\r\n                    {props.teamsCount > 1 ? <Redirect to=\"/main/players\"/> : <Redirect to=\"/main/teams\"/>}\r\n\r\n                       {/* <Route path='' render={() => <Redirect to=\"/main/players\"/>}/>*/}\r\n\r\n\r\n                        <Route path='/main/teams' render={() => <Teams/>}/>\r\n                        <Route path='/main/teams_E' render={() => <TeamsEmpty/>}/>\r\n                        <Route path='/main/teamsCardDetails' render={() => < TeamsCardDetails/>}/>\r\n                        <Route path='/main/addTeams' render={() => < AddTeams/>}/>\r\n\r\n                        <Route  path='/main/players' render={() => <Players/>}/>\r\n                        <Route path='/main/players_E' render={() => <PlayersEmpty/>}/>\r\n                        <Route path='/main/playersCardDetails' render={() => < PlayersCardDetails/>}/>\r\n                        <Route path='/main/addPlayer' render={() => <AddPlayer/>}/>\r\n                        {/*<Route path='*' render={() => <div> page 404 NOT FOUND</div>}/>*/}\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nlet mapStateToProps = (state: any) => ({\r\n    teamsCount: state.teams.count,\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {getPosition})(Main)\r\n\r\n\r\n","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Redux\\toolkit\\selectors.ts",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\PlayersCardDetails\\PlayersCardDetails.tsx",["170"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    getPlayersData,\r\n    getSerialPlayerID,\r\n    getSerialTeamID,\r\n    getTeamsData,\r\n} from '../../../Redux/toolkit/selectors';\r\nimport s from '../../../assets/Style/CardDetails/CardDetails.module.css'\r\nimport total from '../../../totalStyle.module.css'\r\nimport {connect} from \"react-redux\";\r\nimport BreadCrumbs from \"../../BreadCrumbs/BreadCrumbs\";\r\nimport {deletePlayer, getPlayer} from \"../../../Redux/toolkit/playersReducer\";\r\nimport {getTeam} from \"../../../Redux/toolkit/teamsReducer.ts\";\r\n\r\n\r\nconst PlayersCardDetails = (props: any) => {\r\n    const [age, setAge] = useState<null | number>(null)\r\n\r\n    let dataPlayer = props.players[props.serialPlayerID]\r\n    let currentTeamName = props.team[props.serialPlayerID].name\r\n    let ROOT_IMAGES: string = 'http://dev.trainee.dex-it.ru'\r\n\r\n    let deletePlayers = () => {\r\n        props.deletePlayer(dataPlayer.id)\r\n    }\r\n\r\n    const getAgePlayer = () => {\r\n        let currentBirthday: string = dataPlayer.birthday.slice(0, 4)\r\n        const currentYear = new Date().getFullYear()\r\n\r\n        const result = currentYear - (Number(currentBirthday))\r\n\r\n        setAge(result)\r\n        return result\r\n    }\r\n\r\n    if (dataPlayer.birthday && age === null) {\r\n\r\n        let age = getAgePlayer()\r\n\r\n        setAge(age)\r\n    }\r\n\r\n    return (\r\n        <div className={s.cardDetails_wrapper}>\r\n\r\n            <BreadCrumbs katigories={'Players'} delete={deletePlayers}\r\n                         pathAfterDeletion={'players'} name={dataPlayer.name}\r\n                         editPath={'addPlayer'}\r\n            />\r\n\r\n            <div className={s.cardDetails}>\r\n                <div style={{alignItems: \"flex-end\"}} className={s.cardDetails_img}>\r\n                    <img style={{width: \"100%\"}} src={`${ROOT_IMAGES}${dataPlayer.avatarUrl}`} alt=\"img\"/>\r\n                </div>\r\n                <div className={s.cardDetails_info}>\r\n                    <h1 className={total.text_big}>\r\n                        {dataPlayer.name}\r\n                        <span> #{dataPlayer.number}</span>\r\n                    </h1>\r\n                    <div className={s.cardDetails_description}>\r\n                        <div className={s.cardDetails_description_main}>\r\n                            <div className={s.cardDetails_skill}>\r\n                                <h3 className={total.text_middle}>Position</h3>\r\n                                <span className={total.text_small}>\r\n                                {dataPlayer.position}\r\n                            </span>\r\n                            </div>\r\n                            <div className={s.cardDetails_skill}>\r\n                                <h3 className={total.text_middle}>Team</h3>\r\n                                <span className={total.text_small}>\r\n                                {currentTeamName}\r\n                            </span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={s.cardDetails_description_main}>\r\n                            <div className={s.cardDetails_skill}>\r\n                                <h3 className={total.text_middle}>Height</h3>\r\n                                <span className={total.text_small}>\r\n                                {dataPlayer.height} cm\r\n                            </span>\r\n                            </div>\r\n                            <div className={s.cardDetails_skill}>\r\n                                <h3 className={total.text_middle}>Weight</h3>\r\n                                <span className={total.text_small}> {dataPlayer.weight} kg </span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={s.cardDetails_description_main}>\r\n                            <div className={s.cardDetails_skill}>\r\n                                <h3 className={total.text_middle}>Age</h3>\r\n                                <span className={total.text_small}> {age} </span>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: any) => ({\r\n    //player: state.players.data,\r\n    players: getPlayersData(state),\r\n    //teams: getTeamsNames(state),\r\n    team: getTeamsData(state),\r\n    serialPlayerID: getSerialPlayerID(state),\r\n    serialTeamsID: getSerialTeamID(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, {getTeam, getPlayer, deletePlayer})(PlayersCardDetails)","C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\BreadCrumbs\\BreadCrumbs.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\SelectComponent\\SelectComponent.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Players\\AddPlayer\\Calendar\\CalendarComponent.tsx",[],"C:\\Users\\1\\Desktop\\Basketball-React-TS\\my-app\\src\\Components\\Teams\\TeamsCardDetails\\TeamRoster.tsx",["171","172","173","174","175"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    getPagePlayer,\r\n    getPageSizePlayer,\r\n    getPlayersCount,\r\n    getPlayersOfCurrentTeam,\r\n    getUserName\r\n} from '../../../Redux/toolkit/selectors';\r\nimport s from '../../../assets/Style/CardDetails/CardDetails.module.css'\r\nimport total from '../../../totalStyle.module.css'\r\nimport {connect} from \"react-redux\";\r\nimport {setPlayersRequest, getPlayers} from \"../../../Redux/toolkit/playersReducer\";\r\nimport {setTeamSerialId} from \"../../../Redux/toolkit/teamsReducer.ts\";\r\n\r\nconst TeamRoster = (props: any) => {\r\n\r\n    const [page, setPage] = useState(props.pagePlayer)\r\n    const [count, setCount] = useState(props.count)\r\n\r\n    let result = props.count - 25\r\n\r\n    useEffect(() => {\r\n        props.getPlayers(props.name, 1, count)\r\n    }, [])\r\n\r\n    let ROOT_IMAGES: string = 'http://dev.trainee.dex-it.ru'\r\n\r\n    const getAgePlayer = (birthday: string) => {\r\n        let currentBirthday: string = birthday.slice(0, 4)\r\n        const currentYear = new Date().getFullYear()\r\n\r\n        const result = currentYear - (Number(currentBirthday))\r\n        return result\r\n    }\r\n\r\n    return (\r\n        <div className={s.cardDetails_roster}>\r\n            <h1 className={total.text_small}>Roster</h1>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <td>#</td>\r\n                    <td>\r\n                        <span className={total.text_middle14}>Player</span>\r\n                    </td>\r\n                    <td>\r\n                        <span className={total.text_middle14}>Height</span>\r\n                    </td>\r\n                    <td>\r\n                        <span className={total.text_middle14}>Weight</span>\r\n                    </td>\r\n                    <td>\r\n                        <span className={total.text_middle14}>Age</span>\r\n                    </td>\r\n                    <td>\r\n                        <span className={total.text__middle14}>Team</span>\r\n                    </td>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {props.playersOfCurrentTeam.map((player: any) =>\r\n                    <tr key={player.id}>\r\n                        <td>\r\n                            <span className={total.text_middle14}>{player.number}</span>\r\n                        </td>\r\n                        <td>\r\n                            <img src={`${ROOT_IMAGES}${player.avatarUrl}`} alt=\"img\"/>\r\n                        </td>\r\n                        <td>\r\n                            <div className={s.cardDetails_roster_info}>\r\n                                <div className={s.cardDetails_roster_info_descr}>\r\n                                    <span className={total.text__middle14}>{player.name}</span>\r\n                                    <span className={total.text_extraSmall}>{player.position}</span>\r\n                                </div>\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <span className={total.text_middle14}>{player.height} cm</span>\r\n                        </td>\r\n                        <td>\r\n                            <span className={total.text_middle14}>{player.weight} kg</span>\r\n                        </td>\r\n                        <td>\r\n                            <span className={total.text_middle14}>{player.number}</span>\r\n                        </td>\r\n                        <td>\r\n                            <span className={total.text_middle14}>{getAgePlayer(player.birthday)}</span>\r\n                        </td>\r\n                        <td>\r\n                            <span className={total.text_middle14}>{player.team}</span>\r\n                        </td>\r\n\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: any) => ({\r\n    name: getUserName(state),\r\n    count: getPlayersCount(state),\r\n    pagePlayer: getPagePlayer(state),\r\n    pageSizePlayer: getPageSizePlayer(state),\r\n    playersOfCurrentTeam: getPlayersOfCurrentTeam(state),\r\n    //serialTeamsID: getSerialTeamID(state)\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {setTeamSerialId, setPlayersRequest, getPlayers})(TeamRoster)",{"ruleId":"176","severity":1,"message":"177","line":10,"column":5,"nodeType":"178","messageId":"179","endLine":10,"endColumn":10},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"176","severity":1,"message":"184","line":1,"column":16,"nodeType":"178","messageId":"179","endLine":1,"endColumn":24},{"ruleId":"176","severity":1,"message":"185","line":1,"column":16,"nodeType":"178","messageId":"179","endLine":1,"endColumn":25},{"ruleId":"186","severity":1,"message":"187","line":29,"column":8,"nodeType":"188","endLine":29,"endColumn":32,"suggestions":"189"},{"ruleId":"176","severity":1,"message":"190","line":3,"column":8,"nodeType":"178","messageId":"179","endLine":3,"endColumn":12},{"ruleId":"186","severity":1,"message":"191","line":30,"column":8,"nodeType":"188","endLine":30,"endColumn":27,"suggestions":"192"},{"ruleId":"176","severity":1,"message":"193","line":3,"column":8,"nodeType":"178","messageId":"179","endLine":3,"endColumn":9},{"ruleId":"186","severity":1,"message":"194","line":40,"column":8,"nodeType":"188","endLine":40,"endColumn":36,"suggestions":"195"},{"ruleId":"196","severity":1,"message":"197","line":138,"column":21,"nodeType":"198","endLine":138,"endColumn":37},{"ruleId":"196","severity":1,"message":"197","line":61,"column":21,"nodeType":"198","endLine":61,"endColumn":37},{"ruleId":"186","severity":1,"message":"199","line":24,"column":8,"nodeType":"188","endLine":24,"endColumn":10,"suggestions":"200"},{"ruleId":"176","severity":1,"message":"185","line":1,"column":16,"nodeType":"178","messageId":"179","endLine":1,"endColumn":25},{"ruleId":"176","severity":1,"message":"201","line":2,"column":9,"nodeType":"178","messageId":"179","endLine":2,"endColumn":23},{"ruleId":"176","severity":1,"message":"202","line":2,"column":9,"nodeType":"178","messageId":"179","endLine":2,"endColumn":14},{"ruleId":"203","severity":1,"message":"204","line":17,"column":14,"nodeType":"178","messageId":"205","endLine":17,"endColumn":30},{"ruleId":"203","severity":1,"message":"206","line":51,"column":14,"nodeType":"178","messageId":"205","endLine":51,"endColumn":36},{"ruleId":"176","severity":1,"message":"207","line":26,"column":6,"nodeType":"178","messageId":"179","endLine":26,"endColumn":17},{"ruleId":"176","severity":1,"message":"208","line":3,"column":26,"nodeType":"178","messageId":"179","endLine":3,"endColumn":32},{"ruleId":"176","severity":1,"message":"209","line":17,"column":7,"nodeType":"178","messageId":"179","endLine":17,"endColumn":16},{"ruleId":"186","severity":1,"message":"210","line":24,"column":8,"nodeType":"188","endLine":24,"endColumn":10,"suggestions":"211"},{"ruleId":"176","severity":1,"message":"185","line":1,"column":16,"nodeType":"178","messageId":"179","endLine":1,"endColumn":25},{"ruleId":"176","severity":1,"message":"212","line":17,"column":12,"nodeType":"178","messageId":"179","endLine":17,"endColumn":16},{"ruleId":"176","severity":1,"message":"213","line":17,"column":18,"nodeType":"178","messageId":"179","endLine":17,"endColumn":25},{"ruleId":"176","severity":1,"message":"214","line":18,"column":19,"nodeType":"178","messageId":"179","endLine":18,"endColumn":27},{"ruleId":"176","severity":1,"message":"215","line":20,"column":9,"nodeType":"178","messageId":"179","endLine":20,"endColumn":15},{"ruleId":"186","severity":1,"message":"216","line":24,"column":8,"nodeType":"188","endLine":24,"endColumn":10,"suggestions":"217"},"@typescript-eslint/no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["218"],"no-negated-in-lhs",["219"],"'useState' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getTeams' and 'name'. Either include them or remove the dependency array. If 'getTeams' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["220"],"'link' is defined but never used.","React Hook useEffect has a missing dependency: 'setRequest'. Either include it or remove the dependency array. If 'setRequest' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["221"],"'s' is defined but never used.","React Hook useEffect has missing dependencies: 'getPlayers' and 'name'. Either include them or remove the dependency array. If 'getPlayers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["222"],"react/jsx-pascal-case","Imported JSX component Block_Buttons must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","React Hook useEffect has missing dependencies: 'setTeamSerialId' and 'teamId'. Either include them or remove the dependency array. If 'setTeamSerialId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["223"],"'getPlayersData' is defined but never used.","'fstat' is defined but never used.","@typescript-eslint/no-redeclare","'authAPI' is already defined.","redeclared","'playersAPI' is already defined.","'GetTeamType' is defined but never used.","'Switch' is defined but never used.","'PropsType' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["224"],"'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'setCount' is assigned a value but never used.","'result' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'count' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["225"],"no-global-assign","no-unsafe-negation",{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},"Update the dependencies array to be: [pageTeam, pageSizeTeam, getTeams, name]",{"range":"238","text":"239"},"Update the dependencies array to be: [currentPage, setRequest, size]",{"range":"240","text":"241"},"Update the dependencies array to be: [getPlayers, name, pagePlayer, pageSizePlayer]",{"range":"242","text":"243"},"Update the dependencies array to be: [setTeamSerialId, teamId]",{"range":"244","text":"245"},"Update the dependencies array to be: [props]",{"range":"246","text":"247"},"Update the dependencies array to be: [count, props]",{"range":"248","text":"249"},[1193,1217],"[pageTeam, pageSizeTeam, getTeams, name]",[1052,1071],"[currentPage, setRequest, size]",[1594,1622],"[getPlayers, name, pagePlayer, pageSizePlayer]",[782,784],"[setTeamSerialId, teamId]",[927,929],"[props]",[809,811],"[count, props]"]